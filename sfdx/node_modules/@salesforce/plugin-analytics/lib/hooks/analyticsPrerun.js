"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const telemetry_1 = require("@salesforce/telemetry");
const path_1 = require("path");
const analytics_1 = require("../analytics");
const commandExecution_1 = require("../commandExecution");
const debuger_1 = require("../debuger");
/**
 * A hook that runs before every command that:
 *   1. Warns the user about command usage data collection the CLI does
 *      unless they have already acknowledged the warning.
 *   2. Writes logs to a file, including execution and errors.
 *   3. Logs command usage data to the server right after the process ends
 *      by spawning a detached process.
 */
const hook = async function (options) {
    const telemetryEnabled = await telemetry_1.TelemetryReporter.determineSfdxTelemetryEnabled();
    // Don't even bother logging if telemetry is disabled
    if (!telemetryEnabled) {
        debuger_1.debug('Telemetry disabled. Doing nothing.');
        return;
    }
    try {
        // Instantiating analytics shows data collection warning.
        // Adding this to the global so that telemetry events are sent even when different
        // versions of this plugin are in use by the CLI.
        const analytics = (global.cliTelemetry = await analytics_1.default.create({ cacheDir: this.config.cacheDir }));
        const commandExecution = await commandExecution_1.CommandExecution.create({
            command: options.Command,
            argv: options.argv,
            config: this.config
        });
        process.once('exit', status => {
            commandExecution.status = status;
            analytics.record(commandExecution.toJson());
            if (process.listenerCount('exit') >= 20) {
                // On exit listeners have been a problem in the past. Make sure we don't accumulate too many...
                // This could be from too many plugins. If we start getting this, log number of plugins too.
                analytics.record({
                    eventName: 'EVENT_EMITTER_WARNING',
                    type: 'process.exit',
                    count: process.listenerCount('exit')
                });
            }
            // If it is the first time the analytics is running, consider it a new "install".
            if (analytics.firstRun) {
                analytics.record({
                    eventName: 'INSTALL',
                    installType: this.config.binPath && this.config.binPath.includes(path_1.join('sfdx', 'client')) ? 'installer' : 'npm',
                    platform: this.config.platform
                });
            }
            // Upload to server. Starts another process.
            // At this point, any other events during the CLI lifecycle should be logged.
            analytics.upload();
        });
        // Log command errors to the server.  The ts-ignore is necessary
        // because TS is strict about the events that can be handled on process.
        // @ts-ignore
        process.on('cmdError', async (cmdErr, flags = {}, org) => {
            const apiVersion = org ? org.getConnection().getApiVersion() : undefined;
            let orgType = org && (await org.determineIfDevHubOrg()) ? 'devhub' : undefined;
            if (!orgType && org) {
                try {
                    await org.checkScratchOrg();
                    orgType = 'scratch';
                }
                catch (err) {
                    /* Leave the org as unknown for app insights */
                }
            }
            // Telemetry will scrub the exception
            analytics.recordError(cmdErr, Object.assign(commandExecution.toJson(), {
                eventName: 'COMMAND_ERROR',
                apiVersion,
                orgType,
                // @ts-ignore
                __errorWhitelist__: cmdErr.errWhitelist
            }));
        });
    }
    catch (error) {
        debuger_1.debug('Error with logging or sending analytics:', error.message);
    }
};
exports.default = hook;
//# sourceMappingURL=analyticsPrerun.js.map