"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const packAndSign_1 = require("../../../codeSigning/packAndSign");
// noinspection JSUnusedGlobalSymbols
/**
 * Help message for the command.
 * Help doesn't currently work for builtin commands this is here in case it ever does.
 */
// Build function that will perform four things:
// 1) update the npm cert and signature home url in package.json
// 2) pack the npm into a tar gz file
// 3) sign the tar gz file using the private key associated with the cert.
// 4) test verify the signature
// Required Parameters:
// --signatureurl - the url where the signature will be hosted minus the name of the signature file.
// --publickeyurl - the url where the public key/certificate will be hosted.
// --privatekeypath - the local file path for the private key.
// Returns:
// A tar.gz and signature file. The signature file will match the name of the tar gz except the extension will be ".sig".
// This file must be hosted at the location specified by --signature.
// Usage:
// sfdx plugins:trust:sign --signature http://foo.salesforce.internal.com/file/location --publicKeyUrl http://foo.salesforce.internal.com/file/location/sfdx.cert --privateKeyPath $HOME/sfdx.key
class Sign extends command_1.SfdxCommand {
    async run() {
        return packAndSign_1.api.doPackAndSign(this.flags, this.ux);
    }
}
Sign.description = 'pack an npm package and produce a tgz file along with a corresponding digital signature';
Sign.examples = [
    '$ sfdx plugins:trust:sign --signature npmName-0.0.1.sig --publicKeyUrl https://developer.salesforce.com/media/salesforce-cli/sfdx.cer --privateKeyPath $HOME/secret.key'
];
Sign.flagsConfig = {
    signatureurl: command_1.flags.string({
        char: 's',
        required: true,
        description: 'the url location where the signature will be hosted minus the name of the actual signature file.'
    }),
    publickeyurl: command_1.flags.string({
        char: 'p',
        required: true,
        description: 'the url where the public key/certificate will be hosted.'
    }),
    privatekeypath: command_1.flags.string({
        char: 'k',
        required: true,
        description: 'the local file path for the private key.'
    })
};
// Comment this out if your command does not require an org username
Sign.requiresUsername = false;
// Comment this out if your command does not support a hub org username
Sign.supportsDevhubUsername = false;
// Set this to true if your command requires a project workspace; 'requiresProject' is false by default
Sign.requiresProject = false;
exports.Sign = Sign;
//# sourceMappingURL=sign.js.map