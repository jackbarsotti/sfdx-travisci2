#!/usr/bin/env node
import { UX } from '@salesforce/command';
import { Readable } from 'stream';
export interface SigningResponse {
    filename: string;
    verified: boolean;
    version: string;
    name: string;
}
export declare const api: {
    /**
     * Validates that a url is a valid salesforce url.
     * @param url - The url to validate.
     */
    validateUrl(url: string): void;
    /**
     * call out to npm pack;
     */
    pack(): Promise<string>;
    /**
     * verify a signature against a public key and tgz content
     * @param tarGzStream - Tar file to validate
     * @param sigFilenameStream - Computed signature
     * @param publicKeyUrl - url for the public key
     */
    verify(tarGzStream: Readable, sigFilenameStream: Readable, publicKeyUrl: string): Promise<boolean>;
    /**
     * sign a tgz file stream
     * @param fileStream - the tgz file stream to sign
     * @param privateKeyStream - the certificate's private key
     */
    retrieveSignature(fileStream: Readable, privateKeyStream: Readable): Promise<string>;
    /**
     * write the signature to a '.sig' file. this file is to be deployed to signatureurk
     * @param filePath - the file path to the tgz file
     * @param signature - the computed signature
     */
    writeSignatureFile(filePath: string, signature: string): Promise<string>;
    /**
     * read the package.json file for the target npm to be signed.
     */
    retrievePackageJson(): Promise<string>;
    /**
     * read the npm ignore file for the target npm
     * @param filename - local path to the npmignore file
     */
    retrieveIgnoreFile(filename: string): Promise<string>;
    /**
     * checks the ignore content for the code signing patterns. *.tgz, *.sig package.json.bak
     * @param content
     */
    validateNpmIgnorePatterns(content: string): void;
    /**
     * makes a backup copy pf package.json
     * @param src - the package.json to backup
     * @param dest - package.json.bak
     */
    copyPackageDotJson(src: string, dest: string): Promise<void>;
    /**
     * used to update the contents of package.json
     * @param pJson - the updated json content to write to disk
     */
    writePackageJson(pJson: object): Promise<void>;
    /**
     * main method to pack and sign an npm.
     * @param args - reference to process.argv
     * @param ux - The cli ux interface usually provided by oclif.
     * @return {Promise<SigningResponse>} The SigningResponse
     */
    doPackAndSign(args: any, ux: UX): Promise<SigningResponse>;
};
