"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const oclifTest = require("@oclif/test");
const test_1 = require("@oclif/test");
exports.command = test_1.command;
exports.Config = test_1.Config;
exports.expect = test_1.expect;
exports.FancyTypes = test_1.FancyTypes;
const core_1 = require("@salesforce/core");
const testSetup_1 = require("@salesforce/core/lib/testSetup");
const ts_types_1 = require("@salesforce/ts-types");
// Need to prevent typescript error
const IConfig = require("@oclif/config/lib/config");
exports.IConfig = IConfig;
const load_config_1 = require("@oclif/test/lib/load-config");
exports.loadConfig = load_config_1.loadConfig;
load_config_1.loadConfig.root = ts_types_1.ensure(module.parent).filename;
const $$ = testSetup_1.testSetup();
exports.$$ = $$;
const withOrg = (org = {}, setAsDefault = true) => {
    return {
        // tslint:disable-next-line:no-any TODO: properly type the dictionary
        run(ctx) {
            if (!ctx.orgs) {
                ctx.orgs = {};
            }
            if (!org.username) {
                org.username = 'test@org.com';
            }
            // Override org if it exists on context
            ctx.orgs[org.username] = Object.assign({
                orgId: '0x012123',
                instanceUrl: 'http://na30.salesforce.com',
                loginUrl: 'https://login.salesforce.com',
                created: '1519163543003',
                isDevHub: false
            }, org);
            ctx.orgs[org.username].default = setAsDefault;
            const readOrg = async function () {
                const path = this.path;
                const foundOrg = ts_types_1.asJsonMap(find(ctx.orgs, val => {
                    return path.indexOf(ts_types_1.ensureString(val.username)) >= 0;
                }), {});
                return foundOrg;
            };
            const writeOrg = async function () {
                const path = this.path;
                const foundOrg = ts_types_1.asJsonMap(find(ctx.orgs, val => {
                    return path.indexOf(ts_types_1.ensureString(val.username)) >= 0;
                }), {});
                return (ts_types_1.ensure($$.configStubs.AuthInfoConfig).contents = foundOrg);
            };
            $$.configStubs.AuthInfoConfig = {
                retrieveContents: readOrg,
                updateContents: writeOrg
            };
            const defaultOrg = find(ctx.orgs, o => !!o.default && !o.isDevHub);
            const defaultDevHubOrg = find(ctx.orgs, o => !!o.default && !!o.isDevHub);
            $$.configStubs.Config = {
                contents: {
                    defaultusername: defaultOrg && defaultOrg.username,
                    defaultdevhubusername: defaultDevHubOrg && defaultDevHubOrg.username
                }
            };
        }
    };
};
function find(orgs, predicate) {
    return ts_types_1.definiteValuesOf(orgs).filter(predicate)[0];
}
const withConnectionRequest = (fakeFunction) => {
    return {
        run(ctx) {
            $$.fakeConnectionRequest = fakeFunction;
        }
    };
};
const withProject = (sfdxProjectJson) => {
    return {
        run(ctx) {
            $$.SANDBOX.stub(core_1.SfdxProject, 'resolveProjectPath').callsFake((path) => {
                return $$.localPathRetriever(path || $$.id);
            });
            const DEFAULT_PROJECT_JSON = {
                sfdcLoginUrl: 'https://login.salesforce.com'
            };
            $$.configStubs.SfdxProjectJson = {
                contents: Object.assign({}, DEFAULT_PROJECT_JSON, sfdxProjectJson)
            };
        }
    };
};
const test = oclifTest.test
    .register('withOrg', withOrg)
    .register('withConnectionRequest', withConnectionRequest)
    .register('withProject', withProject);
exports.test = test;
exports.default = test;
//# sourceMappingURL=index.js.map