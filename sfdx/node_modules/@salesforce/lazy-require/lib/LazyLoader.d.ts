/**
 * An override of the Node.js Module._load mechanism that replaces loaded modules with
 * JavaScript proxy objects if the module is either a function or object type.  These
 * proxies defer the actual loading of required modules until some aspect of the module
 * is actually used.
 *
 * References:
 * - http://fredkschott.com/post/2014/06/require-and-the-module-system/
 * - http://2ality.com/2014/12/es6-proxies.html
 * - https://hacks.mozilla.org/2015/07/es6-in-depth-proxies-and-reflect/
 * - http://exploringjs.com/es6/ch_proxies.html
 * - https://github.com/tvcutsem/harmony-reflect/blob/master/doc/traps.md
 * - https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20%26%20beyond/ch7.md
 * - http://exploringjs.com/es6/ch_proxies.html#_pitfall-not-all-objects-can-be-wrapped-transparently-by-proxies
 * - https://esdiscuss.org/topic/calling-tostring-on-function-proxy-throws-typeerror-exception
 * - https://gist.github.com/tvcutsem/6536442
 */
import TypeCache from './TypeCache';
import { Module } from './types';
export default class LazyLoader {
    private typeCache;
    private exclusions;
    private packageOnly;
    private modLib;
    private moduleCache;
    private readonly excludes;
    constructor(typeCache: TypeCache, exclusions?: string[], packageOnly?: boolean, modLib?: Module);
    enable(): void;
    disable(): void;
    isEnabled(): boolean;
    getExcludes(): RegExp;
    private buildExclusionPatterns;
    private loadIfNeeded;
    private makeLazy;
    private getModuleType;
    private loadModule;
    private createProxy;
}
