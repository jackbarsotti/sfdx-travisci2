"use strict";
/*
 * Copyright (c) 2018-2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const csv = require("../../../../../csvtojson");
const createUtil_1 = require("../../../../lib/helpers/createUtil");
const fileWriter_1 = require("../../../../lib/helpers/fileWriter");
command_1.core.Messages.importMessagesDirectory(__dirname);
const messages = command_1.core.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'insertRecord');
let Insert = /** @class */ (() => {
    class Insert extends command_1.SfdxCommand {
        async run() {
            const createUtil = new createUtil_1.CreateUtil();
            const fileWriter = new fileWriter_1.FileWriter();
            const filepath = this.flags.filepath;
            let typename = this.flags.typename;
            const inputdir = this.flags.inputdir || 'force-app/main/default/objects';
            const outputdir = this.flags.outputdir || 'force-app/main/default/customMetadata';
            const dirName = createUtil.appendDirectorySuffix(typename);
            const fieldDirPath = `${fileWriter.createDir(inputdir)}${dirName}/fields`;
            const fileNames = await command_1.core.fs.readdir(fieldDirPath);
            const nameField = this.flags.namecolumn || 'Name';
            // forgive them if they passed in type__mdt, and cut off the __mdt
            if (typename.endsWith('__mdt')) {
                typename = typename.substring(0, typename.indexOf('__mdt'));
            }
            // if customMetadata folder does not exist, create it
            await command_1.core.fs.mkdirp(outputdir);
            const fileData = await createUtil.getFileData(fieldDirPath, fileNames);
            const csvDataAry = await csv().fromFile(filepath);
            let recordConfig;
            const ret = [];
            const metadataTypeFields = createUtil.getFieldNames(fileData, nameField);
            if (csvDataAry.length > 0) {
                const record = csvDataAry[0];
                for (const key in record) {
                    if (!metadataTypeFields.includes(key)) {
                        throw new command_1.core.SfdxError(messages.getMessage('fieldNotFoundError', [key, typename]));
                    }
                }
            }
            // find the cmdt in the inputdir.
            // loop through files and create records that match fields
            for (const record of csvDataAry) {
                const recordname = record[nameField].replace(' ', '_');
                const varargs = {};
                // TODO: throw an error if any of the fields in the csvDataAry do not exist in the fileData
                // create varargs
                for (const file of fileData) {
                    const fullName = file.CustomField.fullName[0];
                    // only create fields indicated from the CSV
                    if (record.hasOwnProperty(fullName)) {
                        varargs[fullName] = record[fullName];
                    }
                }
                recordConfig = {
                    typename,
                    recordname,
                    label: record[nameField],
                    inputdir,
                    outputdir,
                    protected: false,
                    varargs,
                    fileData
                };
                ret.push(recordConfig);
                await createUtil.createRecord(recordConfig);
            }
            this.ux.log(messages.getMessage('successResponse', [filepath, outputdir]));
            return ret;
        }
    }
    Insert.description = messages.getMessage('commandDescription');
    Insert.longDescription = messages.getMessage('commandLongDescription');
    Insert.examples = [
        messages.getMessage('exampleCaption1'),
        '    $ sfdx force:cmdt:record:insert --filepath path/to/my.csv --typename My_CMDT_Name',
        messages.getMessage('exampleCaption2'),
        '    $ sfdx force:cmdt:record:insert --filepath path/to/my.csv --typename My_CMDT_Name --inputdir "' + messages.getMessage('inputDirectoryFlagExample') + '" --namecolumn "PrimaryKey"'
    ];
    Insert.flagsConfig = {
        filepath: command_1.flags.string({
            char: 'f',
            description: messages.getMessage('filepathFlagDescription'),
            longDescription: messages.getMessage('filepathFlagLongDescription'),
            required: true
        }),
        typename: command_1.flags.string({
            char: 't',
            description: messages.getMessage('typenameFlagDescription'),
            longDescription: messages.getMessage('typenameFlagLongDescription'),
            required: true
        }),
        inputdir: command_1.flags.directory({
            char: 'i',
            description: messages.getMessage('inputDirectoryFlagDescription'),
            longDescription: messages.getMessage('inputDirectoryFlagLongDescription'),
            default: 'force-app/main/default/objects'
        }),
        outputdir: command_1.flags.directory({
            char: 'd',
            description: messages.getMessage('outputDirectoryFlagDescription'),
            longDescription: messages.getMessage('outputDirectoryFlagLongDescription'),
            default: 'force-app/main/default/customMetadata'
        }),
        namecolumn: command_1.flags.string({
            char: 'n',
            description: messages.getMessage('namecolumnFlagDescription'),
            longDescription: messages.getMessage('namecolumnFlagLongDescription'),
            default: 'Name'
        })
    };
    Insert.requiresProject = true;
    return Insert;
})();
exports.default = Insert;
//# sourceMappingURL=insert.js.map