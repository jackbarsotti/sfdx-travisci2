"use strict";
/*
 * Copyright (c) 2018-2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const fileWriter_1 = require("../../../../lib/helpers/fileWriter");
const validationUtil_1 = require("../../../../lib/helpers/validationUtil");
const templates_1 = require("../../../../lib/templates/templates");
// Initialize Messages with the current plugin directory
command_1.core.Messages.importMessagesDirectory(__dirname);
// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = command_1.core.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'createField');
let Create = /** @class */ (() => {
    class Create extends command_1.SfdxCommand {
        async run() {
            const fieldName = this.flags.fieldname; // this should become the new file name
            const label = this.flags.label || this.flags.fieldname;
            const fieldtype = this.flags.fieldtype;
            const picklistvalues = this.flags.picklistvalues || [];
            const decimalplaces = this.flags.decimalplaces || 0;
            const dir = this.flags.outputdir || '';
            let saveResults;
            const validator = new validationUtil_1.ValidationUtil();
            if (!validator.validateAPIName(fieldName)) {
                throw new command_1.core.SfdxError(messages.getMessage('invalidCustomFieldError', [fieldName]));
            }
            if (fieldtype === 'Picklist' && picklistvalues.length === 0) {
                throw new command_1.core.SfdxError(messages.getMessage('picklistValuesNotSuppliedError'));
            }
            if (decimalplaces < 0) {
                throw new command_1.core.SfdxError(messages.getMessage('invalidDecimalError'));
            }
            const templates = new templates_1.Templates();
            const data = templates.createDefaultTypeStructure(fieldName, fieldtype, label, picklistvalues, decimalplaces);
            const fieldXML = templates.createFieldXML(data, false);
            const writer = new fileWriter_1.FileWriter();
            saveResults = await writer.writeFieldFile(command_1.core.fs, dir, fieldName, fieldXML);
            this.ux.log(messages.getMessage('targetDirectory', [saveResults.dir]));
            this.ux.log(messages.getMessage(saveResults.updated ? 'fileUpdate' : 'fileCreated', [saveResults.fileName]));
            // Return an object to be displayed with --json
            return {
                fieldName,
                label,
                fieldtype
            };
        }
    }
    Create.description = messages.getMessage('commandDescription');
    Create.longDescription = messages.getMessage('commandLongDescription');
    Create.examples = [
        messages.getMessage('exampleCaption1'),
        '    $ sfdx force:cmdt:field:create --fieldname MyField --fieldtype Checkbox',
        messages.getMessage('exampleCaption2'),
        '    $ sfdx force:cmdt:field:create --fieldname MyField --fieldtype Picklist --picklistvalues "A,B,C"',
        messages.getMessage('exampleCaption3'),
        '    $ sfdx force:cmdt:field:create --fieldname MyField --fieldtype Number --decimalplaces 2'
    ];
    Create.args = [{ name: 'file' }];
    Create.flagsConfig = {
        fieldname: command_1.flags.string({
            char: 'n',
            required: true,
            description: messages.getMessage('nameFlagDescription'),
            longDescription: messages.getMessage('nameFlagLongDescription')
        }),
        fieldtype: command_1.flags.enum({
            char: 'f',
            required: true,
            description: messages.getMessage('fieldTypeDescription'),
            longDescription: messages.getMessage('nameFlagLongDescription'),
            options: ['Checkbox', 'Date', 'DateTime', 'Email', 'Number', 'Percent', 'Phone', 'Picklist', 'Text', 'TextArea', 'LongTextArea', 'Url']
        }),
        picklistvalues: command_1.flags.array({
            char: 'p',
            description: messages.getMessage('picklistValuesFlagDescription'),
            longDescription: messages.getMessage('picklistValuesFlagLongDescription')
        }),
        decimalplaces: command_1.flags.number({
            char: 's',
            description: messages.getMessage('decimalplacesFlagDescription'),
            longDescription: messages.getMessage('decimalplacesFlagLongDescription'),
            default: 0
        }),
        label: command_1.flags.string({
            char: 'l',
            description: messages.getMessage('labelFlagDescription'),
            longDescription: messages.getMessage('labelFlagLongDescription')
        }),
        outputdir: command_1.flags.directory({
            char: 'd',
            description: messages.getMessage('outputDirectoryFlagDescription'),
            longDescription: messages.getMessage('outputDirectoryFlagLongDescription')
        })
    };
    // Set this to true if your command requires a project workspace; 'requiresProject' is false by default
    Create.requiresProject = true;
    return Create;
})();
exports.default = Create;
//# sourceMappingURL=create.js.map