"use strict";
/*
 * Copyright (c) 2018-2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const createUtil_1 = require("../../../../lib/helpers/createUtil");
const fileWriter_1 = require("../../../../lib/helpers/fileWriter");
const validationUtil_1 = require("../../../../lib/helpers/validationUtil");
// Initialize Messages with the current plugin directory
command_1.core.Messages.importMessagesDirectory(__dirname);
// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = command_1.core.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'createRecord');
let Create = /** @class */ (() => {
    class Create extends command_1.SfdxCommand {
        async run() {
            try {
                const validator = new validationUtil_1.ValidationUtil();
                const createUtil = new createUtil_1.CreateUtil();
                const fileWriter = new fileWriter_1.FileWriter();
                let typename = this.flags.typename;
                const recordname = this.flags.recordname;
                const label = this.flags.label || this.flags.recordname;
                const protectedFlag = this.flags.protected || 'false';
                const inputdir = this.flags.inputdir || 'force-app/main/default/objects';
                const outputdir = this.flags.outputdir || 'force-app/main/default/customMetadata';
                const dirName = createUtil.appendDirectorySuffix(typename);
                const fieldDirPath = `${fileWriter.createDir(inputdir)}${dirName}/fields`;
                if (!validator.validateMetadataTypeName(typename)) {
                    throw new command_1.core.SfdxError(messages.getMessage('notValidAPINameError', [typename]));
                }
                if (!validator.validateMetadataRecordName(recordname)) {
                    throw new command_1.core.SfdxError(messages.getMessage('notAValidRecordNameError', [recordname]));
                }
                if (!validator.validateLessThanForty(label)) {
                    throw new command_1.core.SfdxError(messages.getMessage('notAValidLabelNameError', [label]));
                }
                const fileNames = await command_1.core.fs.readdir(fieldDirPath);
                // forgive them if they passed in type__mdt, and cut off the __mdt
                if (typename.endsWith('__mdt')) {
                    typename = typename.substring(0, typename.indexOf('__mdt'));
                }
                // if customMetadata folder does not exist, create it
                await command_1.core.fs.mkdirp(outputdir);
                const fileData = await createUtil.getFileData(fieldDirPath, fileNames);
                await createUtil.createRecord({
                    typename,
                    recordname,
                    label,
                    inputdir,
                    outputdir,
                    protected: protectedFlag,
                    varargs: this.varargs,
                    fileData
                });
                this.ux.log(messages.getMessage('successResponse', [typename, recordname, label, protectedFlag, outputdir]));
                // Return an object to be displayed with --json
                return {
                    typename,
                    recordname,
                    label,
                    inputdir,
                    outputdir,
                    protectedFlag,
                    varargs: this.varargs,
                    fileData
                };
            }
            catch (err) {
                this.ux.log(err.message);
            }
        }
    }
    Create.description = messages.getMessage('commandDescription');
    Create.longDescription = messages.getMessage('commandLongDescription');
    Create.examples = [
        messages.getMessage('exampleCaption1'),
        '    $ sfdx force:cmdt:record:create --typename MyCMT__mdt --recordname MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar',
        messages.getMessage('exampleCaption2'),
        '    $ sfdx force:cmdt:record:create --typename MyCMT__mdt --recordname MyRecord --label "' + messages.getMessage('labelFlagExample') + '" ' +
            '--protected true My_Custom_Field_1=Foo My_Custom_Field_2=Bar'
    ];
    Create.flagsConfig = {
        typename: command_1.flags.string({
            char: 't',
            description: messages.getMessage('typenameFlagDescription'),
            longDescription: messages.getMessage('typenameFlagLongDescription'),
            required: true
        }),
        recordname: command_1.flags.string({
            char: 'n',
            description: messages.getMessage('recordNameFlagDescription'),
            longDescription: messages.getMessage('recordNameFlagLongDescription'),
            required: true
        }),
        label: command_1.flags.string({
            char: 'l',
            description: messages.getMessage('labelFlagDescription'),
            longDescription: messages.getMessage('labelFlagLongDescription')
        }),
        protected: command_1.flags.string({
            char: 'p',
            description: messages.getMessage('protectedFlagDescription'),
            longDescription: messages.getMessage('protectedFlagLongDescription'),
            options: ['true', 'false'],
            default: 'false'
        }),
        inputdir: command_1.flags.directory({
            char: 'i',
            description: messages.getMessage('inputDirectoryFlagDescription'),
            longDescription: messages.getMessage('inputDirectoryFlagLongDescription'),
            default: 'force-app/main/default/objects'
        }),
        outputdir: command_1.flags.directory({
            char: 'd',
            description: messages.getMessage('outputDirectoryFlagDescription'),
            longDescription: messages.getMessage('outputDirectoryFlagLongDescription'),
            default: 'force-app/main/default/customMetadata'
        })
    };
    Create.varargs = {
        required: false,
        validator: (name, value) => {
            // only custom fields allowed
            if (!name.endsWith('__c')) {
                const errMsg = `Invalid parameter [${name}] found`;
                const errName = 'InvalidVarargName';
                const errAction = messages.getMessage('errorInvalidCustomField');
                throw new command_1.core.SfdxError(errMsg, errName, [errAction]);
            }
        }
    };
    // Set this to true if your command requires a project workspace; 'requiresProject' is false by default
    Create.requiresProject = true;
    return Create;
})();
exports.default = Create;
//# sourceMappingURL=create.js.map