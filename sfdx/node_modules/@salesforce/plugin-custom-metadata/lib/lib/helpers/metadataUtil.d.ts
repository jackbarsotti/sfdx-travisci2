import { core } from '@salesforce/command';
import { AnyJson } from '@salesforce/ts-types';
export declare class MetadataUtil {
    private conn;
    constructor(connection: core.Connection);
    /**
     * Returns a describe object from the API name you specify
     *
     * @param  objName API name of the object
     * @returns Promise - JSON representation of the describe object
     */
    describeObj(objName: string): Promise<AnyJson>;
    /**
     * Returns an array of object records from a SOQL query
     *
     * @param  soqlStr String representation of the SOQL query
     * @returns Promise - Array of records in JSON format
     */
    queryObject(soqlStr: string): Promise<AnyJson>;
    /**
     * Returns an array of object records
     *
     * @param  describeResult object describe result
     * @returns Promise - Promise - Array of records in JSON format
     */
    queryRecords(describeResult: AnyJson): Promise<AnyJson>;
    /**
     * Returns describe object for the field API name from the Object API name you specify
     *
     * @param  objDescribe  describe object JSON
     * @param  fieldName API name of the field to query
     * @returns Promise - Promise - record in JSON format
     */
    describeField(objDescribe: AnyJson, fieldName: string): AnyJson;
    /**
     * Returns describe object for all fields from the object  API name you specify
     *
     * @param  objDescribe object describe JSON
     * @returns Promise - Promise - record in JSON format
     */
    describeObjFields(objDescribe: AnyJson): AnyJson;
    /**
     * Returns true if the object name you specify is a list type custom setting
     *
     * @param  objName API name of the object to query
     * @returns boolean
     */
    validCustomSettingType(objDescribe: AnyJson): boolean;
    cleanQueryResponse(sObjecRecord: AnyJson, objectDescribe: AnyJson): import("@salesforce/ts-types").JsonMap;
    private _getSoqlQuery;
}
