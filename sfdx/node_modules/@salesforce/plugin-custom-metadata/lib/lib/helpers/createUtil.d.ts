import { CreateConfig } from '../interfaces/createConfig';
import { CustomField } from '../interfaces/customField';
export declare class CreateUtil {
    private fieldTypeMap;
    /**
     * Number and Percent types will be int or double depending on their respective scale values.
     * If the scale === 0, it is an int, otherwise it is a double
     */
    constructor();
    /**
     * Creates the Custom Metadata Record
     *
     * @param  createConfig Properties include typename, recname, label, protection, varargs, and fileData
     * @return void
     */
    createRecord(createConfig: CreateConfig): Promise<void>;
    getFileData(fieldDirPath: any, fileNames: any): Promise<any[]>;
    /**
     * Filenames should have the suffix of '__mdt'. This will append that suffix if it does not exist.
     *
     * @param  typename Name of file
     */
    appendDirectorySuffix(typename: string): string;
    /**
     * Get the field primitive type from the custom metadata type that has a matching field name.
     *
     * @param  fileData Array of objects based on metadata type xml
     * @param  fieldName Name of the field
     * @return {string} Type used by a custom metadata record
     */
    getFieldPrimitiveType(fileData?: CustomField[], fieldName?: string): string;
    /**
     * Get the field type from the custom metadata type that has a matching field name.
     *
     * @param  fileData Array of objects based on metadata type xml
     * @param  fieldName Name of the field
     * @return {string} Data Type of the field.
     */
    getFieldDataType(fileData?: CustomField[], fieldName?: string): string;
    /**
     * Goes through the file data that has been genreated and gets all of the field names and adds the
     * name of the field that is used as the label for metadata record
     *
     * @param  fileData Array of objects based on metadata type xml
     * @param  nameField name of the column that is going to be used for the name of the metadata record
     * @return [] Array of field names
     */
    getFieldNames(fileData: any, nameField: any): any[];
    /**
     * Takes JSON representation of CLI varargs and converts them to xml with help
     * from helper.getFieldTemplate
     *
     * @param  cliParams Object that holds key:value pairs from CLI input
     * @param  fileData Array of objects that contain field data
     * @return {string} String representation of XML
     */
    private buildCustomFieldXml;
    /**
     * Get the number type based on the scale.
     * If the scale === 0, it is an int, otherwise it is a double.
     *
     * @param  type Number or Percent
     * @param  scale 0 or another number
     * @return {string} int or double
     */
    private getNumberType;
    /**
     * Template for a single customMetadata record value. This is used by helper.getRecordTemplate.
     *
     * @param  fieldName Field API Name (i.e, Foo__c)
     * @param  val Value of the field
     * @param  type Field type (i.e. boolean, dateTime, date, string, double)
     * @return {string} String representation of XML
     */
    private getFieldTemplate;
    /**
     * Template to compile entire customMetadata record
     *
     * @param  label Name of the record
     * @param  protection Is the record protected?
     * @param  values Template string representation of values
     * @return {string} String representation of XML
     */
    private getRecordTemplate;
}
