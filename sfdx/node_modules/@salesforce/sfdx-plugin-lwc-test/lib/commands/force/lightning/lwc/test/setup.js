"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const child_process_1 = require("child_process");
const fs = require("fs");
const path = require("path");
const semverCompare = require("semver-compare");
const fileWriter_1 = require("../../../../../lib/fileWriter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/sfdx-plugin-lwc-test', 'setup');
const testScripts = {
    'test:unit': 'sfdx-lwc-jest',
    'test:unit:debug': 'sfdx-lwc-jest --debug',
    'test:unit:watch': 'sfdx-lwc-jest --watch'
};
const jestConfig = `const { jestConfig } = require('@salesforce/sfdx-lwc-jest/config');
module.exports = {
    ...jestConfig,
    // add any custom configurations here
};`;
const forceignoreEntry = '\n# LWC Jest tests\n**/__tests__/**';
class Setup extends command_1.SfdxCommand {
    async run() {
        const fileWriter = this.getFileWriter();
        checkNodeInstall();
        checkNpmInstall();
        if (!fs.existsSync(this.getPackageJsonPath())) {
            throw new core_1.SfdxError(messages.getMessage('errorNoPackageJson'));
        }
        // separate out functionality to easier mock out blocks in tests
        this.updatePackageJsonScripts(fileWriter);
        this.addJestConfig(fileWriter);
        this.updateForceIgnore(fileWriter);
        this.ux.log(messages.getMessage('logFileUpdatesStart'));
        fileWriter.writeFiles();
        this.ux.log('logFileUpdatesEnd');
        // do this as the last step because it is hard to revert if experience an error from anything above
        this.installLwcJest();
        this.ux.log(messages.getMessage('logSuccess'));
        return {
            message: messages.getMessage('logSuccess')
        };
    }
    // pull out to own method for testability
    getFileWriter() {
        return new fileWriter_1.FileWriter();
    }
    getPackageJsonPath() {
        return path.join(this.project.getPath(), 'package.json');
    }
    getPackageJson() {
        return require(this.getPackageJsonPath());
    }
    updatePackageJsonScripts(fileWriter) {
        const packageJson = this.getPackageJson();
        const scripts = packageJson.scripts;
        if (!scripts) {
            packageJson.scripts = testScripts;
            this.ux.log(messages.getMessage('logQueueScripts'));
            fileWriter.queueWrite(this.getPackageJsonPath(), JSON.stringify(packageJson, null, 2), { encoding: 'utf8' });
        }
        else if (!scripts['test:unit'] && !scripts['test:unit:debug'] && !scripts['test:unit:watch']) {
            this.ux.log(messages.getMessage('logQueueScripts'));
            packageJson.scripts = Object.assign(Object.assign({}, scripts), testScripts);
            fileWriter.queueWrite(this.getPackageJsonPath(), JSON.stringify(packageJson, null, 2), { encoding: 'utf8' });
        }
        else {
            this.ux.log(messages.getMessage('logSkippingScripts'));
        }
    }
    addJestConfig(fileWriter) {
        const packageJson = this.getPackageJson();
        const jestConfigPath = path.join(this.project.getPath(), 'jest.config.js');
        const packageJsonJest = packageJson.jest;
        if (packageJsonJest) {
            this.ux.log(messages.getMessage('logConfigInPackageJson'));
        }
        else if (fs.existsSync(jestConfigPath)) {
            this.ux.log(messages.getMessage('logConfigInJestConfigJs'));
        }
        else {
            // no known existing Jest config present in workspace
            this.ux.log(messages.getMessage('logQueueConfig'));
            fileWriter.queueWrite(jestConfigPath, jestConfig);
        }
    }
    updateForceIgnore(fileWriter) {
        const forceignorePath = path.join(this.project.getPath(), '.forceignore');
        if (!fs.existsSync(forceignorePath)) {
            this.ux.log(messages.getMessage('logQueueForceignoreAdd'));
            fileWriter.queueWrite(forceignorePath, forceignoreEntry);
        }
        else {
            const forceignore = fs.readFileSync(forceignorePath, { encoding: 'utf8' });
            if (forceignore.indexOf('**/__tests__/**') === -1) {
                this.ux.log('logQueueForceignoreModify');
                fileWriter.queueAppend(forceignorePath, forceignoreEntry, { encoding: 'utf8' });
            }
        }
    }
    installLwcJest() {
        this.ux.log('Installing @salesforce/sfdx-lwc-jest node package...');
        try {
            const yarnLockExists = fs.existsSync(path.join(this.project.getPath(), 'yarn.lock'));
            if (yarnLockExists) {
                this.ux.log('Detected yarn.lock file, using yarn commands');
                child_process_1.execSync('yarn add --dev @salesforce/sfdx-lwc-jest', { stdio: 'inherit' });
            }
            else {
                child_process_1.execSync('npm install --save-dev @salesforce/sfdx-lwc-jest', { stdio: 'inherit' });
            }
        }
        catch (e) {
            throw new core_1.SfdxError(messages.getMessage('errorLwcJestInstall', [e.message]));
        }
    }
}
exports.default = Setup;
Setup.description = messages.getMessage('commandDescription');
Setup.longDescription = messages.getMessage('longDescription');
Setup.examples = [
    messages.getMessage('example')
];
Setup.requiresProject = true;
function checkNodeInstall() {
    let nodeVersionRet;
    try {
        nodeVersionRet = child_process_1.execSync('node -v');
    }
    catch (_a) {
        throw new core_1.SfdxError(messages.getMessage('errorNodeNotFound'));
    }
    const nodeVersion = nodeVersionRet.toString().slice(1); // strip the v from v8.12.0
    // semver-compare returns -1 if first param is lower than second, 0 if they're equal, 1 if first param is higher
    if (semverCompare(nodeVersion, '8.12.0') < 0) {
        throw new core_1.SfdxError(messages.getMessage('errorNodeVersion', [nodeVersion]));
    }
}
function checkNpmInstall() {
    try {
        child_process_1.execSync('npm -v');
    }
    catch (_a) {
        throw new core_1.SfdxError(messages.getMessage('errorNpmNotFound'));
    }
}
//# sourceMappingURL=setup.js.map