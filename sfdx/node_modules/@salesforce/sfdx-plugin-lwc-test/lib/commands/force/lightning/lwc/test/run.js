"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const child_process_1 = require("child_process");
const fs = require("fs");
const path = require("path");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/sfdx-plugin-lwc-test', 'run');
class Run extends command_1.SfdxCommand {
    async run() {
        const args = [];
        // TODO(tbliss): how to use 'exclusive' setting above? exclusive not a valid prop for boolean flags
        if (this.flags.debug && this.flags.watch) {
            throw new core_1.SfdxError(messages.getMessage('errorInvalidFlags'));
        }
        if (this.flags.debug) {
            args.push('--debug');
        }
        else if (this.flags.watch) {
            args.push('--watch');
        }
        if (this.args.passthrough) {
            args.push(this.args.passthrough);
        }
        const scriptRet = this.runJest(args);
        this.ux.log(messages.getMessage('logSuccess', [scriptRet.status.toString()]));
        return {
            message: messages.getMessage('logSuccess', [scriptRet.status.toString()]),
            jestExitCode: scriptRet.status
        };
    }
    runJest(args) {
        return child_process_1.spawnSync(this.getExecutablePath(), args, {
            stdio: 'inherit',
            shell: true
        });
    }
    getExecutablePath() {
        const projectPath = this.project.getPath();
        const nodeModulePath = process.platform === 'win32' ?
            path.join('@salesforce', 'sfdx-lwc-jest', 'bin', 'sfdx-lwc-jest') :
            path.join('.bin', 'sfdx-lwc-jest');
        const executablePath = path.join(projectPath, 'node_modules', nodeModulePath);
        if (!fs.existsSync(executablePath)) {
            throw new core_1.SfdxError(messages.getMessage('errorNoExecutableFound'));
        }
        return executablePath;
    }
}
exports.default = Run;
Run.description = messages.getMessage('commandDescription');
Run.longDescription = messages.getMessage('longDescription');
Run.examples = [
    messages.getMessage('example1'),
    messages.getMessage('example2')
];
Run.args = [{ name: 'passthrough' }];
Run.flagsConfig = {
    debug: command_1.flags.boolean({
        char: 'd',
        description: messages.getMessage('debugFlagDescription'),
        longDescription: messages.getMessage('debugFlagLongDescription')
        // exclusive: ['watch']
    }),
    watch: command_1.flags.boolean({
        description: messages.getMessage('watchFlagDescription'),
        longDescription: messages.getMessage('watchFlagLongDescription')
        // exclusive: ['debug']
    })
};
// Set this to true if your command requires a project workspace; 'requiresProject' is false by default
Run.requiresProject = true;
//# sourceMappingURL=run.js.map