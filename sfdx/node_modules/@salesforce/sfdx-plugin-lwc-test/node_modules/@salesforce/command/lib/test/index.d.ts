import * as oclifTest from '@oclif/test';
import { command, Config, expect, FancyTypes } from '@oclif/test';
import { AuthFields } from '@salesforce/core';
import { TestContext } from '@salesforce/core/lib/testSetup';
import { AnyJson, Dictionary, JsonMap, Optional } from '@salesforce/ts-types';
import * as IConfig from '@oclif/config/lib/config';
import { loadConfig } from '@oclif/test/lib/load-config';
declare const $$: TestContext;
declare const test: oclifTest.FancyTypes.Base<oclifTest.FancyTypes.Context, {
    skip: {
        output: {};
        args: [];
    };
} & {
    only: {
        output: {};
        args: [];
    };
} & {
    retries: {
        output: {};
        args: [number];
    };
} & {
    catch: {
        output: {
            error: Error;
        };
        args: [string | RegExp | ((err: Error) => any), ({
            raiseIfNotThrown?: boolean | undefined;
        } | undefined)?];
    };
} & {
    env: {
        output: {};
        args: [{
            [k: string]: Optional<string | null>;
        }, (oclifTest.FancyTypes.EnvOptions | undefined)?];
    };
} & {
    stub: {
        output: {
            stubs: any[];
        };
        args: any[];
    };
} & {
    stdin: {
        output: {};
        args: [string, (number | undefined)?];
    };
} & {
    stderr: {
        output: {
            readonly stderr: string;
        };
        args: [({
            print?: boolean | undefined;
            stripColor?: boolean | undefined;
        } | undefined)?];
    };
} & {
    stdout: {
        output: {
            readonly stdout: string;
        };
        args: [({
            print?: boolean | undefined;
            stripColor?: boolean | undefined;
        } | undefined)?];
    };
} & {
    nock: {
        output: {
            nock: number;
        };
        args: [string, oclifTest.FancyTypes.NockOptions | oclifTest.FancyTypes.NockCallback, (oclifTest.FancyTypes.NockCallback | undefined)?];
    };
} & {
    timeout: {
        output: {
            timeout: number;
        };
        args: [(number | undefined)?];
    };
} & {
    loadConfig: {
        output: {
            config: oclifTest.Config.IConfig;
        };
        args: [(loadConfig.Options | undefined)?];
    };
} & {
    command: {
        output: {
            config: oclifTest.Config.IConfig;
            expectation: string;
        };
        args: [string | string[], (loadConfig.Options | undefined)?];
    };
} & {
    exit: {
        output: {
            error: any;
        };
        args: [(number | undefined)?];
    };
} & {
    hook: {
        output: {
            config: oclifTest.Config.IConfig;
            expectation: string;
        };
        args: [string, Optional<object>?, (loadConfig.Options | undefined)?];
    };
} & {
    withOrg: {
        output: Dictionary<any>;
        args: [(Partial<AuthFields> | undefined)?, (boolean | undefined)?];
    };
} & {
    withConnectionRequest: {
        output: Dictionary<unknown>;
        args: [(request: AnyJson, options?: Optional<AnyJson>) => Promise<AnyJson>];
    };
} & {
    withProject: {
        output: Dictionary<unknown>;
        args: [Optional<JsonMap>?];
    };
}>;
export default test;
export { expect, FancyTypes, Config, command, loadConfig, IConfig, test, $$, TestContext };
