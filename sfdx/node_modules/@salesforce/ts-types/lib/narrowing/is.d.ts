import { AnyArray, AnyArrayLike, AnyConstructor, AnyFunction, AnyJson, JsonArray, JsonMap, KeyOf, Optional } from '../types';
/**
 * Tests whether an `unknown` value is a `string`.
 *
 * @param value The value to test.
 */
export declare function isString(value: unknown): value is string;
/**
 * Tests whether an `unknown` value is a `number`.
 *
 * @param value The value to test.
 */
export declare function isNumber(value: unknown): value is number;
/**
 * Tests whether an `unknown` value is a `boolean`.
 *
 * @param value The value to test.
 */
export declare function isBoolean(value: unknown): value is boolean;
/**
 * Tests whether an `unknown` value is an `Object` subtype (e.g., arrays, functions, objects, regexes,
 * new Number(0), new String(''), and new Boolean(true)). Tests that wish to distinguish objects that
 * were created from literals or that otherwise were not created via a non-`Object` constructor and do
 * not have a prototype chain should instead use {@link isPlainObject}.
 *
 * @param value The value to test.
 */
export declare function isObject(value: unknown): value is object;
/**
 * Tests whether or not an `unknown` value is a plain JavaScript object. That is, if it is an object created
 * by the Object constructor or one with a null `prototype`.
 *
 * @param value The value to test.
 */
export declare function isPlainObject(value: unknown): value is object;
/**
 * Tests whether an `unknown` value is a `function`.
 *
 * @param value The value to test.
 */
export declare function isInstance<C extends AnyConstructor>(value: unknown, ctor: C): value is InstanceType<C>;
/**
 * Tests whether an `unknown` value is a class constructor that is either equal to or extends another class
 * constructor.
 *
 * @param value The value to test.
 * @param cls The class to test against.
 */
export declare function isClassAssignableTo<C extends AnyConstructor>(value: unknown, cls: C): value is C;
/**
 * Tests whether an `unknown` value is an `Array`.
 *
 * @param value The value to test.
 */
export declare function isArray(value: unknown): value is AnyArray;
/**
 * Tests whether an `unknown` value conforms to {@link AnyArrayLike}.
 *
 * @param value The value to test.
 */
export declare function isArrayLike(value: unknown): value is AnyArrayLike;
/**
 * Tests whether an `unknown` value is a `function`.
 *
 * @param value The value to test.
 */
export declare function isFunction(value: unknown): value is AnyFunction;
/**
 * Tests whether `unknown` value is a valid JSON type. Note that objects and arrays are only checked using a shallow
 * test. To be sure that a given value is JSON-compatible at runtime, see {@link toAnyJson}.
 *
 * @param value The value to test.
 */
export declare function isAnyJson(value: unknown): value is AnyJson;
/**
 * Tests whether an `AnyJson` value is an object.
 *
 * @param value The value to test.
 */
export declare function isJsonMap(value: Optional<AnyJson>): value is JsonMap;
/**
 * Tests whether an `AnyJson` value is an array.
 *
 * @param value The value to test.
 */
export declare function isJsonArray(value: Optional<AnyJson>): value is JsonArray;
/**
 * Tests whether or not a `key` string is a key of the given object type `T`.
 *
 * @param obj The target object to check the key in.
 * @param key The string to test as a key of the target object.
 */
export declare function isKeyOf<T extends object, K extends KeyOf<T>>(obj: T, key: string): key is K;
