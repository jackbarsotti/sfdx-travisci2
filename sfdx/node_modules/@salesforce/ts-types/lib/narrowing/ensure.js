"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const as_1 = require("./as");
const to_1 = require("./to");
/**
 * Narrows a type `Nullable<T>` to a `T` or raises an error.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is `undefined` or `null`.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensure(value, message) {
    if (value == null) {
        throw new errors_1.UnexpectedValueTypeError(message || 'Value is undefined');
    }
    return value;
}
exports.ensure = ensure;
/**
 * Narrows an `unknown` value to a `string` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureString(value, message) {
    return ensure(as_1.asString(value), message || 'Value is not an string');
}
exports.ensureString = ensureString;
/**
 * Narrows an `unknown` value to a `number` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureNumber(value, message) {
    return ensure(as_1.asNumber(value), message || 'Value is not an number');
}
exports.ensureNumber = ensureNumber;
/**
 * Narrows an `unknown` value to a `boolean` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureBoolean(value, message) {
    return ensure(as_1.asBoolean(value), message || 'Value is not an boolean');
}
exports.ensureBoolean = ensureBoolean;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureObject(value, message) {
    return ensure(as_1.asObject(value), message || 'Value is not an object');
}
exports.ensureObject = ensureObject;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible and tests positively with {@link isPlainObject},
 * or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensurePlainObject(value, message) {
    return ensure(as_1.asObject(value), message || 'Value is not an object');
}
exports.ensurePlainObject = ensurePlainObject;
/**
 * Narrows an `unknown` value to instance of constructor type `T` if it is type-compatible, or raises an error
 * otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureInstance(value, ctor, message) {
    return ensure(as_1.asInstance(value, ctor), message || `Value is not an instance of ${ctor.name}`);
}
exports.ensureInstance = ensureInstance;
/**
 * Narrows an `unknown` value to an `Array` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureArray(value, message) {
    return ensure(as_1.asArray(value), message || 'Value is not an array');
}
exports.ensureArray = ensureArray;
/**
 * Narrows an `unknown` value to an `AnyFunction` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureFunction(value, message) {
    return ensure(as_1.asFunction(value), message || 'Value is not a function');
}
exports.ensureFunction = ensureFunction;
/**
 * Narrows an `unknown` value to an `AnyJson` if it is type-compatible, or returns `undefined` otherwise.
 *
 * See also caveats noted in {@link isAnyJson}.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was not a JSON value type.
 */
function ensureAnyJson(value, message) {
    return ensure(to_1.toAnyJson(value), message || 'Value is not a JSON-compatible value type');
}
exports.ensureAnyJson = ensureAnyJson;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureJsonMap(value, message) {
    return ensure(as_1.asJsonMap(value), message || 'Value is not a JsonMap');
}
exports.ensureJsonMap = ensureJsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type-compatible, or raises an error otherwise.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
function ensureJsonArray(value, message) {
    return ensure(as_1.asJsonArray(value), message || 'Value is not JsonArray');
}
exports.ensureJsonArray = ensureJsonArray;
//# sourceMappingURL=ensure.js.map