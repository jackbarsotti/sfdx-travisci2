import { AnyArray, AnyConstructor, AnyFunction, AnyJson, JsonArray, JsonMap, Optional } from '../types';
/**
 * Narrows an `unknown` value to a `string` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asString(value: unknown): Optional<string>;
/**
 * Narrows an `unknown` value to a `string` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asString(value: unknown, defaultValue: string): string;
/**
 * Narrows an `unknown` value to a `number` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asNumber(value: unknown): Optional<number>;
/**
 * Narrows an `unknown` value to a `number` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asNumber(value: unknown, defaultValue: number): number;
/**
 * Narrows an `unknown` value to a `boolean` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asBoolean(value: unknown): Optional<boolean>;
/**
 * Narrows an `unknown` value to a `boolean` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asBoolean(value: unknown, defaultValue: boolean): boolean;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asObject(value: unknown): Optional<object>;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asObject(value: unknown, defaultValue: object): object;
/**
 * Narrows an `unknown` value to a plain `object` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asPlainObject(value: unknown): Optional<object>;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asPlainObject(value: unknown, defaultValue: object): object;
/**
 * Narrows an `unknown` value to an instance of constructor type `T` if it is type-compatible, or returns `undefined`
 * otherwise.
 *
 * @param value The value to test.
 */
export declare function asInstance<C extends AnyConstructor>(value: unknown, ctor: C): Optional<InstanceType<C>>;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asInstance<C extends AnyConstructor>(value: unknown, ctor: C, defaultValue: InstanceType<C>): InstanceType<C>;
/**
 * Narrows an `unknown` value to an `Array` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asArray(value: unknown): Optional<AnyArray>;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asArray(value: unknown, defaultValue: AnyArray): AnyArray;
/**
 * Narrows an `unknown` value to an `AnyFunction` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asFunction(value: unknown): Optional<AnyFunction>;
/**
 * Narrows an `unknown` value to an `object` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asFunction(value: unknown, defaultValue: AnyFunction): AnyFunction;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asJsonMap(value: Optional<AnyJson>): Optional<JsonMap>;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if `value` was undefined or of the incorrect type.
 */
export declare function asJsonMap(value: Optional<AnyJson>, defaultValue: JsonMap): JsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asJsonArray(value: Optional<AnyJson>): Optional<JsonArray>;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asJsonArray(value: Optional<AnyJson>, defaultValue: JsonArray): JsonArray;
