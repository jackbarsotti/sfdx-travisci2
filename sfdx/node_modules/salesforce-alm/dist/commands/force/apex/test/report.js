"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const Messages = require("../../../../lib/messages");
const ReporterCommand_1 = require("../../../../ReporterCommand");
const messages = Messages();
const consts = require("../../../../lib/core/constants");
class ApexTestReportCommand extends ReporterCommand_1.ReporterCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const Command = require('../../../../lib/apex/apexReportCommand');
        const results = await this.execLegacyCommand(new Command(), context);
        if (process.env.SFDX_IMPROVED_CODE_COVERAGE !== 'true' && this.flags.codecoverage) {
            this.ux.warn(messages.getMessage('apexReportImprovedCoverageWarning', [], 'apex'));
        }
        return results;
    }
}
exports.ApexTestReportCommand = ApexTestReportCommand;
ApexTestReportCommand.theDescription = messages.getMessage('apexReportCommandDescription', [], 'apex');
ApexTestReportCommand.longDescription = messages.getMessage('apexReportCommandDescriptionLong', [], 'apex');
ApexTestReportCommand.help = messages.getMessage('apexReportCommandHelp', [], 'apex');
ApexTestReportCommand.requiresProject = false;
ApexTestReportCommand.requiresUsername = true;
ApexTestReportCommand.resultFormatOptions = { options: ['human', 'tap', 'junit', 'json'], default: 'human' };
ApexTestReportCommand.flagsConfig = {
    testrunid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('apexReportCommandParamTestRunId', [], 'apex'),
        longDescription: messages.getMessage('apexReportCommandParamTestRunIdLong', [], 'apex'),
        required: true
    }),
    codecoverage: command_1.flags.boolean({
        char: 'c',
        description: messages.getMessage('apexCommandParamCodeCoverage', [], 'apex'),
        longDescription: messages.getMessage('apexCommandParamCodeCoverageLong', [], 'apex'),
        required: false
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('apexCommandParamTestArtifactDir', [], 'apex'),
        longDescription: messages.getMessage('apexCommandParamTestArtifactDirLong', [], 'apex'),
        required: false
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('streamingWait', []),
        longDescription: messages.getMessage('streamingWaitLong', []),
        required: false,
        min: kit_1.Duration.minutes(consts.MIN_STREAM_TIMEOUT_MINUTES),
        default: kit_1.Duration.minutes(consts.DEFAULT_STREAM_TIMEOUT_MINUTES)
    }),
    verbose: command_1.flags.builtin({
        description: messages.getMessage('verboseDescription', [], 'apex'),
        longDescription: messages.getMessage('verboseLongDescription', [], 'apex')
    })
};

//# sourceMappingURL=report.js.map
