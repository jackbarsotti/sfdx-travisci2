"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const core_1 = require("@salesforce/core");
const sandboxOrg_1 = require("../../../lib/org/sandbox/sandboxOrg");
const sandboxOrgConfig_1 = require("@salesforce/core/lib/config/sandboxOrgConfig");
const ts_types_1 = require("@salesforce/ts-types");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'org_delete');
class OrgDeleteCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const heroku = require('heroku-cli-util');
        let deleteMsgKey;
        const prodOrgUsername = await this.org.getSandboxOrgConfigField(sandboxOrgConfig_1.SandboxOrgConfig.Fields.PROD_ORG_USERNAME);
        if (prodOrgUsername) {
            deleteMsgKey = messages.getMessage('sandbox');
        }
        else {
            deleteMsgKey = messages.getMessage('scratchOrg');
        }
        // don't prompt yes/no if we're forcing the delete request, just execute
        if (this.flags.noprompt) {
            return this.deleteOrg(prodOrgUsername);
        }
        else {
            return heroku
                .prompt(messages.getMessage('confirmDeleteYesNo', [deleteMsgKey, this.org.getUsername()]), {})
                .then(answer => {
                if (answer.toUpperCase() === 'YES' || answer.toUpperCase() === 'Y') {
                    return this.deleteOrg(prodOrgUsername);
                }
                return undefined;
            });
        }
    }
    async deleteOrg(prodOrgUsername) {
        if (prodOrgUsername) {
            return this.deleteSandbox(prodOrgUsername);
        }
        else {
            return this.deleteScratchOrg();
        }
    }
    async deleteSandbox(prodOrgUsername) {
        let successMessageKey = 'commandSandboxSuccess';
        this.logger.debug('Delete started for sandbox org %s ', this.org.getUsername());
        let prodOrg = await core_1.Org.create({
            aliasOrUsername: ts_types_1.ensureString(prodOrgUsername),
            aggregator: this.configAggregator
        });
        const prodSandboxOrg = await sandboxOrg_1.SandboxOrg.getInstance(prodOrg, this.flags.wait, this.logger, this.flags.clientid);
        try {
            await prodSandboxOrg.deleteSandbox(this.org.getOrgId());
            this.logger.debug('Sandbox org %s successfully marked for deletion', this.org.getUsername());
        }
        catch (err) {
            if (err.name === 'sandboxProcessNotFoundByOrgId') {
                successMessageKey = 'commandSandboxConfigOnlySuccess';
            }
            else {
                throw err;
            }
        }
        await this.org.remove();
        this.logger.debug('Sandbox org config %s has been successfully deleted', this.org.getUsername());
        this.ux.log(messages.getMessage(successMessageKey, [this.org.getUsername()]));
    }
    async deleteScratchOrg() {
        const context = await this.resolveLegacyContext();
        const ActiveScratchOrgDeleteCommand = require('../../../lib/org/activeScratchOrgDeleteCommand');
        const activeScratchOrgDeleteCommand = new ActiveScratchOrgDeleteCommand();
        return await this.execLegacyCommand(activeScratchOrgDeleteCommand, context);
    }
}
exports.OrgDeleteCommand = OrgDeleteCommand;
OrgDeleteCommand.theDescription = messages.getMessage('commandDescription');
OrgDeleteCommand.longDescription = messages.getMessage('commandDescriptionLong');
OrgDeleteCommand.help = messages.getMessage('commandHelp');
OrgDeleteCommand.requiresProject = false;
OrgDeleteCommand.requiresUsername = true;
OrgDeleteCommand.supportsDevhubUsername = true;
OrgDeleteCommand.flagsConfig = {
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('forceFlagDescription'),
        longDescription: messages.getMessage('forceFlagDescriptionLong'),
        required: false
    })
};

//# sourceMappingURL=delete.js.map
