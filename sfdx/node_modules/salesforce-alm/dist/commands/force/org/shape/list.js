"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const BBPromise = require("bluebird");
const fs = require("fs");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class OrgShapeListCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        BBPromise.promisifyAll(fs);
        const OrgShapeListCommand = require('../../../../lib/org/orgShapeListCommand'); // eslint-disable-line global-require
        return this.execLegacyCommand(new OrgShapeListCommand(), context);
    }
}
exports.OrgShapeListCommand = OrgShapeListCommand;
OrgShapeListCommand.theDescription = messages.getMessage('description', [], 'org_shape_list');
OrgShapeListCommand.longDescription = messages.getMessage('longDescription', [], 'org_shape_list');
OrgShapeListCommand.help = messages.getMessage('help', [], 'org_shape_list');
OrgShapeListCommand.requiresProject = false;
OrgShapeListCommand.flagsConfig = {
    verbose: command_1.flags.builtin({
        description: messages.getMessage('verbose', [], 'org_shape_list'),
        longDescription: messages.getMessage('verboseLong', [], 'org_shape_list')
    })
};

//# sourceMappingURL=list.js.map
