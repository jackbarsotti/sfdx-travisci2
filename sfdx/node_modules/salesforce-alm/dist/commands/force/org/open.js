"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const srcDevUtil_1 = require("../../../lib/core/srcDevUtil");
const Messages = require("../../../lib/messages");
const open_1 = require("../../../lib/org/open");
const messages = Messages();
class OrgOpenCommand extends command_1.SfdxCommand {
    async run() {
        // The old org:open didn't have a "setup" flag but had it in the code to go to
        // the setup page. I'm not sure if it was ever there or removed on purpose, but
        // kept the code path just in case.
        const path = this.flags.path;
        const urlOnly = this.flags.urlonly;
        const { orgId, url, username } = await open_1.default.open(this.org, this.ux, path, false, urlOnly);
        if (srcDevUtil_1.isSFDXContainerMode()) {
            // instruct the user that they need to paste the URL into the browser
            this.ux.styledHeader(messages.getMessage('actionRequiredHeader'));
            this.ux.log(messages.getMessage('openCommandContainerAction', [orgId, url]));
        }
        else {
            this.ux.log(messages.getMessage('openCommandHumanSuccess', [orgId, username, url]));
        }
        return { orgId, url, username };
    }
}
exports.OrgOpenCommand = OrgOpenCommand;
OrgOpenCommand.description = `${messages.getMessage('openCommandCliDescription')}\n${messages.getMessage('openCommandCliHelp')}`;
OrgOpenCommand.longDescription = messages.getMessage('openCommandCliDescriptionLong');
// TODO ask ruth about this. Keep help for legacy doc creation
OrgOpenCommand.help = messages.getMessage('openCommandCliHelp');
OrgOpenCommand.requiresProject = false;
OrgOpenCommand.requiresUsername = true;
OrgOpenCommand.flagsConfig = {
    path: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('openCommandCliPath'),
        longDescription: messages.getMessage('openCommandCliPathLong'),
        required: false
    }),
    urlonly: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('openCommandUrlonly'),
        longDescription: messages.getMessage('openCommandUrlonlyLong'),
        required: false
    })
};

//# sourceMappingURL=open.js.map
