"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const consts = require("../../../lib/core/constants");
const { DEFAULT_SRC_WAIT_MINUTES, MIN_SRC_DEPLOY_WAIT_MINUTES } = consts;
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'source_deploy');
const commonMsgs = core_1.Messages.loadMessages('salesforce-alm', 'source');
const mdapiMessages = core_1.Messages.loadMessages('salesforce-alm', 'mdapi_deploy');
class SourceDeployCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const { SourceApiCommand } = require('../../../lib/source/sourceApiCommand');
        const context = await this.resolveLegacyContext();
        context.deploytype = SourceApiCommand.SOURCE_DEPLOY;
        return await this.execLegacyCommand(new SourceApiCommand(false), context);
    }
}
exports.SourceDeployCommand = SourceDeployCommand;
SourceDeployCommand.theDescription = messages.getMessage('description');
SourceDeployCommand.longDescription = messages.getMessage('longDescription');
SourceDeployCommand.help = messages.getMessage('help');
SourceDeployCommand.requiresProject = true;
SourceDeployCommand.requiresUsername = true;
SourceDeployCommand.flagsConfig = {
    checkonly: command_1.flags.boolean({
        char: 'c',
        description: mdapiMessages.getMessage('mdDeployCommandCliCheckOnly'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliCheckOnlyLong'),
        required: false
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        required: false,
        hidden: false,
        default: kit_1.Duration.minutes(DEFAULT_SRC_WAIT_MINUTES),
        min: kit_1.Duration.minutes(MIN_SRC_DEPLOY_WAIT_MINUTES),
        description: commonMsgs.getMessage('waitParamDescription'),
        longDescription: commonMsgs.getMessage('waitParamDescriptionLong')
    }),
    testlevel: command_1.flags.enum({
        char: 'l',
        description: mdapiMessages.getMessage('mdDeployCommandCliTestLevel'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliTestLevelLong'),
        required: false,
        options: ['NoTestRun', 'RunSpecifiedTests', 'RunLocalTests', 'RunAllTestsInOrg']
    }),
    runtests: command_1.flags.array({
        char: 'r',
        description: mdapiMessages.getMessage('mdDeployCommandCliRunTests'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliRunTestsLong'),
        required: false
    }),
    ignoreerrors: command_1.flags.boolean({
        char: 'o',
        description: mdapiMessages.getMessage('mdDeployCommandCliIgnoreErrors'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliIgnoreErrorsLong'),
        required: false
    }),
    ignorewarnings: command_1.flags.boolean({
        char: 'g',
        description: mdapiMessages.getMessage('mdDeployCommandCliIgnoreWarnings'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliIgnoreWarningsLong'),
        required: false
    }),
    validateddeployrequestid: command_1.flags.id({
        char: 'q',
        description: mdapiMessages.getMessage('mdDeployCommandCliValidatedDeployRequestId'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliValidatedDeployRequestIdLong'),
        required: false,
        exclusive: [
            'manifest',
            'metadata',
            'sourcepath',
            'checkonly',
            'testlevel',
            'runtests',
            'ignoreerrors',
            'ignorewarnings'
        ]
    }),
    verbose: command_1.flags.builtin({
        description: mdapiMessages.getMessage('mdDeployCommandCliVerbose'),
        longDescription: mdapiMessages.getMessage('mdDeployCommandCliVerboseLong')
    }),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('metadataParamDescription'),
        longDescription: messages.getMessage('metadataParamLongDescription'),
        required: false,
        exclusive: ['manifest', 'sourcepath']
    }),
    sourcepath: command_1.flags.array({
        char: 'p',
        required: false,
        hidden: false,
        description: messages.getMessage('sourcePathDescription'),
        longDescription: messages.getMessage('sourcePathLongDescription'),
        exclusive: ['manifest', 'metadata']
    }),
    manifest: command_1.flags.filepath({
        char: 'x',
        required: false,
        hidden: false,
        description: messages.getMessage('manifestDescription'),
        longDescription: messages.getMessage('manifestLongDescription'),
        exclusive: ['metadata', 'sourcepath']
    })
};

//# sourceMappingURL=deploy.js.map
