"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const consts = require("../../../lib/core/constants");
const { DEFAULT_SRC_WAIT_MINUTES, MIN_SRC_WAIT_MINUTES } = consts;
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'source_delete');
const commonMsgs = core_1.Messages.loadMessages('salesforce-alm', 'source');
class SourceDeleteCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const { SourceApiCommand } = require('../../../lib/source/sourceApiCommand');
        const context = await this.resolveLegacyContext();
        context.deploytype = SourceApiCommand.SOURCE_DEPLOY;
        return await this.execLegacyCommand(new SourceApiCommand(true), context);
    }
}
exports.SourceDeleteCommand = SourceDeleteCommand;
SourceDeleteCommand.theDescription = messages.getMessage('description');
SourceDeleteCommand.longDescription = messages.getMessage('longDescription');
SourceDeleteCommand.help = messages.getMessage('help');
SourceDeleteCommand.requiresProject = true;
SourceDeleteCommand.requiresUsername = true;
SourceDeleteCommand.flagsConfig = {
    checkonly: command_1.flags.boolean({
        char: 'c',
        description: messages.getMessage('deleteCommandCliCheckOnly'),
        longDescription: messages.getMessage('deleteCommandCliCheckOnlyLong'),
        required: false
    }),
    noprompt: command_1.flags.boolean({
        char: 'r',
        required: false,
        hidden: false,
        description: messages.getMessage('noPromptParamDescription'),
        longDescription: messages.getMessage('noPromptParamLongDescription')
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        required: false,
        hidden: false,
        default: kit_1.Duration.minutes(DEFAULT_SRC_WAIT_MINUTES),
        min: kit_1.Duration.minutes(MIN_SRC_WAIT_MINUTES),
        description: commonMsgs.getMessage('waitParamDescription', [DEFAULT_SRC_WAIT_MINUTES]),
        longDescription: commonMsgs.getMessage('waitParamDescriptionLong')
    }),
    sourcepath: command_1.flags.array({
        char: 'p',
        required: false,
        hidden: false,
        description: messages.getMessage('sourcePathDescription'),
        longDescription: messages.getMessage('sourcePathLongDescription'),
        exclusive: ['metadata']
    }),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('metadataParamDescription'),
        longDescription: messages.getMessage('metadataParamLongDescription'),
        required: false
    })
};

//# sourceMappingURL=delete.js.map
