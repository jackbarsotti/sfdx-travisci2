"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const core_1 = require("@salesforce/core");
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const consts = require("../../../../lib/core/constants");
const Stash = require("../../../../lib/core/stash");
const { DEFAULT_SRC_WAIT_MINUTES, MIN_SRC_WAIT_MINUTES } = consts;
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'source_deploy_cancel');
const commonMsgs = core_1.Messages.loadMessages('salesforce-alm', 'source');
class SourceDeployCancelCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const { MdapiCancelCommand } = require('../../../../lib/mdapi/mdapiDeployCancelCommand');
        const context = await this.resolveLegacyContext();
        return await this.execLegacyCommand(new MdapiCancelCommand(Stash.Commands.SOURCE_DEPLOY), context);
    }
}
exports.SourceDeployCancelCommand = SourceDeployCancelCommand;
SourceDeployCancelCommand.theDescription = messages.getMessage('description');
SourceDeployCancelCommand.longDescription = messages.getMessage('longDescription');
SourceDeployCancelCommand.help = messages.getMessage('help');
SourceDeployCancelCommand.requiresProject = false;
SourceDeployCancelCommand.requiresUsername = true;
SourceDeployCancelCommand.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        required: false,
        hidden: false,
        default: kit_1.Duration.minutes(DEFAULT_SRC_WAIT_MINUTES),
        min: kit_1.Duration.minutes(MIN_SRC_WAIT_MINUTES),
        description: commonMsgs.getMessage('waitParamDescription', [DEFAULT_SRC_WAIT_MINUTES]),
        longDescription: commonMsgs.getMessage('waitParamDescriptionLong')
    }),
    jobid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('jobId'),
        longDescription: messages.getMessage('jobIdLong'),
        required: false
    })
};

//# sourceMappingURL=cancel.js.map
