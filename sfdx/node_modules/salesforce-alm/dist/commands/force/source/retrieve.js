"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const configApi_1 = require("../../../lib/core/configApi");
const sourceRetrieveCommand_1 = require("../../../lib/source/sourceRetrieveCommand");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const configInstance = new configApi_1.Config();
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'source_retrieve');
const mdapiMsgs = core_1.Messages.loadMessages('salesforce-alm', 'mdapi_retrieve');
const commonMsgs = core_1.Messages.loadMessages('salesforce-alm', 'source');
const consts = require("../../../lib/core/constants");
class SourceRetrieveCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        return await this.execLegacyCommand(new sourceRetrieveCommand_1.SourceRetrieveCommand(), context);
    }
}
exports.SourceRetrieveCommand = SourceRetrieveCommand;
SourceRetrieveCommand.theDescription = messages.getMessage('description');
SourceRetrieveCommand.longDescription = messages.getMessage('longDescription');
SourceRetrieveCommand.help = messages.getMessage('help');
SourceRetrieveCommand.requiresProject = true;
SourceRetrieveCommand.requiresUsername = true;
SourceRetrieveCommand.flagsConfig = {
    apiversion: command_1.flags.builtin({
        // @ts-ignore force char override for backward compat -- don't try this at home!
        char: 'a',
        description: mdapiMsgs.getMessage('apiversionFlagDescription', [configInstance.getApiVersion()]),
        longDescription: mdapiMsgs.getMessage('apiversionFlagLongDescription')
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        required: false,
        hidden: false,
        default: kit_1.Duration.minutes(consts.DEFAULT_SRC_WAIT_MINUTES),
        min: kit_1.Duration.minutes(consts.MIN_SRC_WAIT_MINUTES),
        description: commonMsgs.getMessage('waitParamDescription'),
        longDescription: commonMsgs.getMessage('waitParamDescriptionLong')
    }),
    manifest: command_1.flags.filepath({
        char: 'x',
        description: messages.getMessage('manifestParamDescription'),
        longDescription: messages.getMessage('manifestParamLongDescription'),
        required: false,
        exclusive: ['metadata', 'sourcepath']
    }),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('metadataParamDescription'),
        longDescription: messages.getMessage('metadataParamLongDescription'),
        required: false,
        exclusive: ['manifest', 'sourcepath']
    }),
    packagenames: command_1.flags.array({
        char: 'n',
        description: mdapiMsgs.getMessage('packagenamesFlagDescription'),
        longDescription: mdapiMsgs.getMessage('packagenamesFlagLongDescription'),
        required: false
    }),
    sourcepath: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('sourcePathParamDescription'),
        longDescription: messages.getMessage('sourcePathParamLongDescription'),
        required: false,
        exclusive: ['manifest', 'metadata']
    }),
    verbose: command_1.flags.builtin({
        description: mdapiMsgs.getMessage('verboseFlagDescription'),
        longDescription: mdapiMsgs.getMessage('verboseFlagLongDescription')
    })
};

//# sourceMappingURL=retrieve.js.map
