"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const ts_types_1 = require("@salesforce/ts-types");
const lodash_1 = require("lodash");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class DocListCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        let commands = this.config.commands;
        commands = commands.filter(c => c.id.indexOf('force:') === 0);
        if (!this.flags.hidden) {
            commands = commands.filter(c => !c.hidden);
        }
        commands = kit_1.sortBy(commands, 'id');
        const longestCmdName = commands.reduce((acc, curr) => Math.max(acc, curr.id.length), 0);
        this.ux.styledHeader('Commands');
        for (const command of commands) {
            if (this.flags.usage) {
                this.ux.log(`  ${this.getUsageForCommand(command)}`);
            }
            else {
                const buffer = new Array(longestCmdName - command.id.length + 2).join(' ');
                const description = command.description ? command.description.split('\n')[0] : '';
                this.ux.log(`  ${command.id}${buffer}# ${description}`);
            }
        }
        return commands.map(command => {
            if (this.flags.usage) {
                return this.getUsageForCommand(command);
            }
            return { name: command.id, description: command.description };
        });
    }
    getUsageForCommand(command) {
        let usage;
        if (ts_types_1.isString(command.usage)) {
            usage = command.usage;
        }
        else if (command.usage) {
            usage = command.usage.join('\n');
        }
        return lodash_1.template(usage)({ command });
    }
}
exports.DocListCommand = DocListCommand;
DocListCommand.theDescription = messages.getMessage('docCommandsListDescription');
DocListCommand.longDescription = messages.getMessage('docCommandsListDescriptionLong');
DocListCommand.help = messages.getMessage('docCommandsListHelp');
DocListCommand.requiresProject = false;
DocListCommand.hidden = true;
DocListCommand.deprecated = {
    version: 48.0,
    to: 'sfdx commands'
};
DocListCommand.flagsConfig = {
    usage: command_1.flags.boolean({
        char: 'u',
        required: false,
        hidden: false,
        description: messages.getMessage('docCommandsListUsageDescription'),
        longDescription: messages.getMessage('docCommandsListUsageDescriptionLong')
    })
};

//# sourceMappingURL=list.js.map
