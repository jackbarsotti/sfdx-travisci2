"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/force-cli/force-cli-messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
class DataBulkUpsertCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const { DataBulkUpsertCommand } = require('../../../../lib/data/dataBulkUpsertCommand');
        return await this.execLegacyCommand(new DataBulkUpsertCommand(), context);
    }
}
exports.DataBulkUpsertCommand = DataBulkUpsertCommand;
DataBulkUpsertCommand.theDescription = Messages.get('DataBulkUpsertDescription');
DataBulkUpsertCommand.longDescription = Messages.get('DataBulkUpsertLongDescription');
DataBulkUpsertCommand.help = Messages.get('DataBulkUpsertHelp');
DataBulkUpsertCommand.requiresProject = false;
DataBulkUpsertCommand.flagsConfig = {
    sobjecttype: command_1.flags.string({
        char: 's',
        required: true,
        hidden: false,
        description: Messages.get('DataBulkUpsertSobjectTypeDescription'),
        longDescription: Messages.get('DataBulkUpsertSobjectTypeLongDescription')
    }),
    csvfile: command_1.flags.filepath({
        char: 'f',
        required: true,
        hidden: false,
        description: Messages.get('DataBulkUpsertCsvFilePathDescription'),
        longDescription: Messages.get('DataBulkUpsertCsvFilePathLongDescription')
    }),
    externalid: command_1.flags.string({
        char: 'i',
        required: true,
        hidden: false,
        description: Messages.get('DataBulkUpsertExternalIdDescription'),
        longDescription: Messages.get('DataBulkUpsertExternalIdLongDescription')
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        required: false,
        hidden: false,
        min: 0,
        description: Messages.get('DataBulkUpsertWaitDescription'),
        longDescription: Messages.get('DataBulkUpsertWaitLongDescription')
    })
};
DataBulkUpsertCommand.requiresUsername = true;

//# sourceMappingURL=upsert.js.map
