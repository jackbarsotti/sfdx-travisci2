"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
/**
 * Command that provides data export capability.
 */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class DataTreeExportCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const DataExportCommand = require('../../../../lib/data/dataExportCommand');
        return this.execLegacyCommand(new DataExportCommand(), context);
    }
}
exports.DataTreeExportCommand = DataTreeExportCommand;
DataTreeExportCommand.theDescription = messages.getMessage('dataExportCommandCliDescription', [], 'data');
DataTreeExportCommand.longDescription = messages.getMessage('dataExportCommandCliDescriptionLong', [], 'data');
DataTreeExportCommand.help = messages.getMessage('dataExportCommandCliHelp', [], 'data');
DataTreeExportCommand.requiresProject = false;
DataTreeExportCommand.requiresUsername = true;
DataTreeExportCommand.flagsConfig = {
    query: command_1.flags.string({
        char: 'q',
        description: messages.getMessage('dataExportCommandCliSoql', [], 'data'),
        longDescription: messages.getMessage('dataExportCommandCliSoqlLong', [], 'data'),
        required: true
    }),
    plan: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('dataExportCommandCliPlan', [], 'data'),
        longDescription: messages.getMessage('dataExportCommandCliPlanLong', [], 'data'),
        required: false
    }),
    prefix: command_1.flags.string({
        char: 'x',
        description: messages.getMessage('dataExportCommandCliPrefix', [], 'data'),
        longDescription: messages.getMessage('dataExportCommandCliPrefixLong', [], 'data'),
        required: false
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('dataExportCommandCliDir', [], 'data'),
        longDescription: messages.getMessage('dataExportCommandCliDirLong', [], 'data'),
        required: false
    })
};

//# sourceMappingURL=export.js.map
