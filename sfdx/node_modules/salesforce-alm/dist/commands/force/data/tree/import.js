"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
/**
 * Command that provides data import capability.
 */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class DataTreeImportCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const DataImportCommand = require('../../../../lib/data/dataImportCommand');
        const DataImportConfigHelpCommand = require('../../../../lib/data/dataImportConfigHelpCommand');
        const dataImport = context.flags.confighelp ? new DataImportConfigHelpCommand() : new DataImportCommand();
        return this.execLegacyCommand(dataImport, context);
    }
}
exports.DataTreeImportCommand = DataTreeImportCommand;
DataTreeImportCommand.theDescription = messages.getMessage('dataImportCommandCliDescription', [], 'data');
DataTreeImportCommand.longDescription = messages.getMessage('dataImportCommandCliDescriptionLong', [], 'data');
DataTreeImportCommand.help = messages.getMessage('dataImportCommandCliHelp', [], 'data');
DataTreeImportCommand.schema = {
    name: 'dataImportPlanSchema.json',
    flag: 'plan'
};
DataTreeImportCommand.requiresProject = false;
DataTreeImportCommand.requiresUsername = true;
DataTreeImportCommand.flagsConfig = {
    sobjecttreefiles: command_1.flags.array({
        char: 'f',
        description: messages.getMessage('dataImportCommandCliFiles', [], 'data'),
        longDescription: messages.getMessage('dataImportCommandCliFilesLong', [], 'data'),
        required: false,
        exclusive: ['plan']
    }),
    plan: command_1.flags.filepath({
        char: 'p',
        description: messages.getMessage('dataImportCommandCliPlan', [], 'data'),
        longDescription: messages.getMessage('dataImportCommandCliPlanLong', [], 'data'),
        required: false
    }),
    contenttype: command_1.flags.string({
        char: 'c',
        description: messages.getMessage('dataImportCommandCliContentType', [], 'data'),
        longDescription: messages.getMessage('dataImportCommandCliContentTypeLong', [], 'data'),
        required: false,
        hidden: true
    })
};

//# sourceMappingURL=import.js.map
