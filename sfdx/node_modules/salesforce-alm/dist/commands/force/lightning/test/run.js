"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/messages");
const ReporterCommand_1 = require("../../../../ReporterCommand");
const messages = Messages();
class LightningTestRunCommand extends ReporterCommand_1.ReporterCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const LightningTestCommand = require('../../../../lib/lightning/lightningTestCommand');
        return this.execLegacyCommand(new LightningTestCommand(), context);
    }
}
exports.LightningTestRunCommand = LightningTestRunCommand;
LightningTestRunCommand.theDescription = messages.getMessage('lightningTestCommandDescription', [], 'lightning_test');
LightningTestRunCommand.longDescription = messages.getMessage('lightningTestCommandDescriptionLong', [], 'lightning_test');
LightningTestRunCommand.deprecated = {
    version: 50.0,
    message: messages.getMessage('lightningTestingServiceDeprecated', [], 'lightning_test')
};
LightningTestRunCommand.help = messages.getMessage('lightningTestCommandHelp', [], 'lightning_test');
LightningTestRunCommand.requiresProject = false;
LightningTestRunCommand.requiresUsername = true;
LightningTestRunCommand.resultFormatOptions = { options: ['human', 'tap', 'junit', 'json'], default: 'human' };
LightningTestRunCommand.flagsConfig = {
    appname: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('lightningTestCommandParamAppName', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestCommandParamAppNameLong', [], 'lightning_test'),
        required: false
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('lightningCommandParamTestArtifactDir', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningCommandParamTestArtifactDirLong', [], 'lightning_test'),
        required: false
    }),
    configfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('lightningTestCommandParamConfig', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestCommandParamConfigLong', [], 'lightning_test'),
        required: false
    }),
    leavebrowseropen: command_1.flags.boolean({
        char: 'o',
        description: messages.getMessage('lightningTestCommandParamLeaveBrowserOpen', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestCommandParamLeaveBrowserOpenLong', [], 'lightning_test'),
        required: false
    }),
    timeout: command_1.flags.number({
        char: 't',
        description: messages.getMessage('lightningTestCommandParamTimeout', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestCommandParamTimeoutLong', [], 'lightning_test'),
        required: false,
        default: 60000
    })
};

//# sourceMappingURL=run.js.map
