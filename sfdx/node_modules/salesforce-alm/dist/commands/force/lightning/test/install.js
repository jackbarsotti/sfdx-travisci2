"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class LightningTestInstallCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const LightningTestInstallCommand = require('../../../../lib/lightning/lightningTestInstallCommand');
        return this.execLegacyCommand(new LightningTestInstallCommand(), context);
    }
}
exports.LightningTestInstallCommand = LightningTestInstallCommand;
LightningTestInstallCommand.theDescription = messages.getMessage('lightningTestInstallCommandDescription', [], 'lightning_test');
LightningTestInstallCommand.longDescription = messages.getMessage('lightningTestInstallCommandDescriptionLong', [], 'lightning_test');
LightningTestInstallCommand.deprecated = {
    version: 50.0,
    message: messages.getMessage('lightningTestingServiceDeprecated', [], 'lightning_test')
};
LightningTestInstallCommand.help = messages.getMessage('lightningTestInstallCommandHelp', [], 'lightning_test');
LightningTestInstallCommand.requiresProject = false;
LightningTestInstallCommand.requiresUsername = true;
LightningTestInstallCommand.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('lightningTestInstallCommandParamWait', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestInstallCommandParamWaitLong', [], 'lightning_test'),
        required: false,
        default: kit_1.Duration.minutes(2)
    }),
    releaseversion: command_1.flags.string({
        char: 'r',
        description: messages.getMessage('lightningTestInstallCommandParamVersion', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestInstallCommandParamVersionLong', [], 'lightning_test'),
        required: false,
        default: 'latest'
    }),
    packagetype: command_1.flags.enum({
        char: 't',
        description: messages.getMessage('lightningTestInstallCommandParamType', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestInstallCommandParamTypeLong', [], 'lightning_test'),
        required: false,
        default: 'full',
        options: ['jasmine', 'mocha', 'full']
    })
};

//# sourceMappingURL=install.js.map
