"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
class MdapiConvertCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const MdapiConvertCommand = require('../../../lib/source/mdapiConvertCommand');
        return this.execLegacyCommand(new MdapiConvertCommand(), context);
    }
}
exports.MdapiConvertCommand = MdapiConvertCommand;
MdapiConvertCommand.theDescription = messages.getMessage('description', null, 'mdapiConvertCommand');
MdapiConvertCommand.longDescription = messages.getMessage('longDescription', null, 'mdapiConvertCommand');
MdapiConvertCommand.help = messages.getMessage('help', null, 'mdapiConvertCommand');
MdapiConvertCommand.initializeMetadataRegistry = true;
MdapiConvertCommand.showProgress = true;
MdapiConvertCommand.requiresUsername = false;
MdapiConvertCommand.requiresProject = true;
MdapiConvertCommand.flagsConfig = {
    rootdir: command_1.flags.directory({
        char: 'r',
        description: messages.getMessage('rootParam', null, 'mdapiConvertCommand'),
        longDescription: messages.getMessage('rootParamLongDescription', null, 'mdapiConvertCommand'),
        required: true
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('outputDirectoryParam', null, 'mdapiConvertCommand'),
        longDescription: messages.getMessage('outputDirectoryParamLongDescription', null, 'mdapiConvertCommand'),
        required: false
    }),
    manifest: command_1.flags.string({
        char: 'x',
        description: messages.getMessage('manifestDescription', null, 'mdapiConvertCommand'),
        longDescription: messages.getMessage('manifestLongDescription', null, 'mdapiConvertCommand'),
        required: false
    }),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('metadataParamDescription', null, 'mdapiConvertCommand'),
        longDescription: messages.getMessage('metadataParamLongDescription', null, 'mdapiConvertCommand'),
        required: false,
        exclusive: ['manifest', 'metadatapath']
    }),
    metadatapath: command_1.flags.array({
        char: 'p',
        required: false,
        hidden: false,
        description: messages.getMessage('sourcePathDescription', null, 'mdapiConvertCommand'),
        longDescription: messages.getMessage('sourcePathLongDescription', null, 'mdapiConvertCommand'),
        exclusive: ['manifest', 'metadata']
    })
};

//# sourceMappingURL=convert.js.map
