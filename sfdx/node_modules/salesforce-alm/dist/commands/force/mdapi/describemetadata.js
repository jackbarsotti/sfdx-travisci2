"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const Messages = require("../../../lib/messages");
const messages = Messages();
const configApi_1 = require("../../../lib/core/configApi");
const configInstance = new configApi_1.Config();
class MdapiDescribemetadataCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const MdapiDescribemetadataCommand = require('../../../lib/mdapi/mdapiDescribemetadataCommand');
        return this.execLegacyCommand(new MdapiDescribemetadataCommand(context), context);
    }
}
exports.MdapiDescribemetadataCommand = MdapiDescribemetadataCommand;
MdapiDescribemetadataCommand.theDescription = messages.getMessage('mdDescribeMetadataCommandCliDescription');
MdapiDescribemetadataCommand.longDescription = messages.getMessage('mdDescribeMetadataCommandCliLong');
MdapiDescribemetadataCommand.help = messages.getMessage('mdDescribeMetadataCommandCliHelp');
MdapiDescribemetadataCommand.requiresProject = false;
MdapiDescribemetadataCommand.requiresUsername = true;
MdapiDescribemetadataCommand.flagsConfig = {
    apiversion: command_1.flags.builtin({
        // @ts-ignore force char override for backward compat -- don't try this at home!
        char: 'a',
        description: messages.getMessage('mdDescribeMetadataCommandCliApiVersion', configInstance.getApiVersion()),
        longDescription: messages.getMessage('mdDescribeMetadataCommandCliApiVersionLong', configInstance.getApiVersion())
    }),
    resultfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('mdDescribeMetadataCommandCliFilterKnown'),
        longDescription: messages.getMessage('mdDescribeMetadataCommandCliFilterKnownLong'),
        required: false
    }),
    filterknown: command_1.flags.boolean({
        char: 'k',
        description: messages.getMessage('mdDescribeMetadataCommandCliResultFile'),
        longDescription: messages.getMessage('mdDescribeMetadataCommandCliResultFileLong'),
        hidden: true
    })
};

//# sourceMappingURL=describemetadata.js.map
