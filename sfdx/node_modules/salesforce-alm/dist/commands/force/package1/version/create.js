"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class Package1VersionCreateCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const Package1VersionCreateCommand = require('../../../../lib/package1/package1VersionCreateCommand');
        return this.execLegacyCommand(new Package1VersionCreateCommand(), context);
    }
}
exports.Package1VersionCreateCommand = Package1VersionCreateCommand;
Package1VersionCreateCommand.theDescription = messages.getMessage('package1VersionCreateCommandCliDescription');
Package1VersionCreateCommand.longDescription = messages.getMessage('package1VersionCreateCommandCliDescriptionLong');
Package1VersionCreateCommand.help = messages.getMessage('package1VersionCreateCommandCliHelp');
Package1VersionCreateCommand.requiresUsername = true;
Package1VersionCreateCommand.requiresProject = true;
Package1VersionCreateCommand.flagsConfig = {
    packageid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('package1VersionCreateCommandId'),
        longDescription: messages.getMessage('package1VersionCreateCommandIdLong'),
        required: true
    }),
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('package1VersionCreateCommandName'),
        longDescription: messages.getMessage('package1VersionCreateCommandNameLong'),
        required: true
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('package1VersionCreateCommandDescription'),
        longDescription: messages.getMessage('package1VersionCreateCommandDescriptionLong'),
        required: false
    }),
    version: command_1.flags.string({
        char: 'v',
        description: messages.getMessage('package1VersionCreateCommandVersion'),
        longDescription: messages.getMessage('package1VersionCreateCommandVersionLong'),
        required: false
    }),
    managedreleased: command_1.flags.boolean({
        char: 'm',
        description: messages.getMessage('package1VersionCreateCommandManagedReleased'),
        longDescription: messages.getMessage('package1VersionCreateCommandManagedReleasedLong'),
        required: false
    }),
    releasenotesurl: command_1.flags.url({
        char: 'r',
        description: messages.getMessage('package1VersionCreateCommandReleaseNotes'),
        longDescription: messages.getMessage('package1VersionCreateCommandReleaseNotesLong'),
        required: false
    }),
    postinstallurl: command_1.flags.url({
        char: 'p',
        description: messages.getMessage('package1VersionCreateCommandPostInstall'),
        longDescription: messages.getMessage('package1VersionCreateCommandPostInstallLong'),
        required: false
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('package1VersionCreateCommandInstallationKey'),
        longDescription: messages.getMessage('package1VersionCreateCommandInstallationKeyLong'),
        required: false
    }),
    wait: command_1.flags.number({
        char: 'w',
        description: messages.getMessage('package1VersionCreateCommandWait'),
        longDescription: messages.getMessage('package1VersionCreateCommandWaitLong'),
        required: false
    })
};

//# sourceMappingURL=create.js.map
