"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const deviceFlowService_1 = require("../../../../lib/auth/deviceFlowService");
core_1.Messages.importMessagesDirectory(__dirname);
const authMessages = core_1.Messages.loadMessages('salesforce-alm', 'auth');
const commonMessages = core_1.Messages.loadMessages('salesforce-alm', 'common');
const heroku = require('heroku-cli-util');
class AuthDeviceLoginCommand extends command_1.SfdxCommand {
    async getClientSecret() {
        return await heroku.prompt(commonMessages.getMessage('stdin.secret'));
    }
    async run() {
        let clientSecret;
        const deviceCommand = await deviceFlowService_1.DeviceFlowService.create(this.flags);
        if (this.flags.clientid) {
            clientSecret = await this.getClientSecret();
        }
        if (process.env.SFDX_ENV === 'DEMO') {
            this.ux.warn(authMessages.getMessage('device.warnAuth'));
        }
        try {
            // Request Device Login
            const loginData = await deviceCommand.requestDeviceLogin();
            if (this.flags.json) {
                this.ux.logJson(loginData);
            }
            else {
                this.ux.styledHeader(authMessages.getMessage('device.actionRequired'));
                this.ux.log(authMessages.getMessage('device.enterCode'), loginData.user_code, loginData.verification_uri);
                this.ux.log();
            }
            deviceCommand.logHelper('debug', 'requestDeviceLogin success');
            // Wait for user to enter code, login, 2fa ( sometimes ), and approve
            const approval = await deviceCommand.awaitDeviceApproval(loginData);
            deviceCommand.logHelper('debug', 'awaitDeviceApproval success');
            // Save an .sfdx/example@example.org authinfo file
            const authInfoResponse = await deviceCommand.authorizeAndSave(approval, clientSecret);
            deviceCommand.logHelper('debug', 'authorizeAndSave success');
            if (this.flags.json) {
                this.result = {
                    data: authInfoResponse,
                    ux: this.ux,
                    display: () => { }
                };
            }
            else {
                this.ux.log(authMessages.getMessage('device.loginSuccess'), authInfoResponse.username);
                this.ux.log();
            }
            // optionally set an alias
            return deviceCommand.doSetAlias(authInfoResponse.username);
        }
        catch (err) {
            if (err.statusCode === 400 && err.error) {
                deviceCommand.logHelper('error', `Device Login Command caught an error ${err.error.error.toUpperCase()} - ${err.error.error_description}`);
                let errorStr = `${err.error.error.toUpperCase()} - ${err.error.error_description}`;
                if (AuthDeviceLoginCommand.knownAuthErrors.includes(err.error.error)) {
                    errorStr += '.\n';
                    errorStr += authMessages.getMessage(`device.errors.${err.error.error}`);
                }
                throw new core_1.SfdxError(errorStr);
            }
            else {
                deviceCommand.logHelper('error', `Device Login Command caught an unknown error ${err}`);
                throw err;
            }
        }
    }
}
exports.AuthDeviceLoginCommand = AuthDeviceLoginCommand;
AuthDeviceLoginCommand.hidden = false;
AuthDeviceLoginCommand.knownAuthErrors = [
    'access_denied',
    'invalid_client_id',
    'invalid_grant',
    'invalid_request',
    'server_error',
    'slow_down'
];
AuthDeviceLoginCommand.description = authMessages.getMessage('device.description');
AuthDeviceLoginCommand.longDescription = authMessages.getMessage('device.longDescription');
AuthDeviceLoginCommand.examples = [
    authMessages.getMessage('device.example1'),
    authMessages.getMessage('device.example2'),
    authMessages.getMessage('device.example3')
];
AuthDeviceLoginCommand.requiresProject = false;
AuthDeviceLoginCommand.flagsConfig = {
    clientid: command_1.flags.string({
        char: 'i',
        description: commonMessages.getMessage('clientId'),
        longDescription: commonMessages.getMessage('clientId')
    }),
    instanceurl: command_1.flags.url({
        char: 'r',
        description: commonMessages.getMessage('instanceUrl'),
        longDescription: commonMessages.getMessage('instanceUrl')
    }),
    setdefaultdevhubusername: command_1.flags.boolean({
        char: 'd',
        description: commonMessages.getMessage('setDefaultDevHub'),
        longDescription: commonMessages.getMessage('setDefaultDevHub')
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: commonMessages.getMessage('setDefaultUsername'),
        longDescription: commonMessages.getMessage('setDefaultUsername')
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: commonMessages.getMessage('setAlias'),
        longDescription: commonMessages.getMessage('setAlias')
    })
};

//# sourceMappingURL=login.js.map
