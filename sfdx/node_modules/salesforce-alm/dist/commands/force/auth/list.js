"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const path_1 = require("path");
const Alias = require("../../../lib/core/alias");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'auth');
class AuthListCommand extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.errors = false;
    }
    async run() {
        const auths = await this.computeAuthList();
        const columns = ['alias', 'username', 'orgId', 'instanceUrl', 'oauthMethod'];
        if (this.errors) {
            columns.push('error');
        }
        this.ux.styledHeader('authenticated orgs');
        this.ux.table(auths, columns);
        return auths;
    }
    async computeAuthList() {
        const filenames = await core_1.AuthInfo.listAllAuthFiles();
        const auths = [];
        for (const filename of filenames) {
            const username = path_1.basename(filename, path_1.extname(filename));
            try {
                const config = await core_1.AuthInfo.create({ username });
                const fields = config.getFields();
                auths.push({
                    alias: await Alias.byValue(fields.username),
                    username: fields.username,
                    orgId: fields.orgId,
                    instanceUrl: fields.instanceUrl,
                    accessToken: config.getConnectionOptions().accessToken,
                    oauthMethod: config.isJwt() ? 'jwt' : config.isOauth() ? 'web' : 'token'
                });
            }
            catch (err) {
                // Most likely, an error decrypting the token
                const file = await core_1.AuthInfoConfig.create(core_1.AuthInfoConfig.getOptions(username));
                const contents = file.getContents();
                auths.push({
                    alias: await Alias.byValue(contents.username),
                    username: ts_types_1.ensureString(contents.username),
                    orgId: ts_types_1.ensureString(contents.orgId),
                    instanceUrl: ts_types_1.ensureString(contents.instanceUrl),
                    accessToken: undefined,
                    oauthMethod: 'unknown',
                    error: err.message
                });
                this.errors = true;
            }
        }
        return auths;
    }
}
exports.AuthListCommand = AuthListCommand;
AuthListCommand.description = messages.getMessage('list.description');
AuthListCommand.longDescription = messages.getMessage('list.description');
AuthListCommand.flagsConfig = {};

//# sourceMappingURL=list.js.map
