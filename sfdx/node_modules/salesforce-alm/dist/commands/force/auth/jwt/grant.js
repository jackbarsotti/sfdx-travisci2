"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
class AuthJwtGrantCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const AuthCommand = require('../../../../lib/auth/authCommand');
        const authCommand = new AuthCommand();
        return this.execLegacyCommand(authCommand, context);
    }
}
exports.AuthJwtGrantCommand = AuthJwtGrantCommand;
AuthJwtGrantCommand.theDescription = messages.getMessage('description', [], 'auth_jwt');
AuthJwtGrantCommand.longDescription = messages.getMessage('longDescription', [], 'auth_jwt');
AuthJwtGrantCommand.help = messages.getMessage('help', [], 'auth_jwt');
AuthJwtGrantCommand.requiresProject = false;
AuthJwtGrantCommand.flagsConfig = {
    username: command_1.flags.string({
        char: 'u',
        description: messages.getMessage('username', [], 'auth_jwt'),
        longDescription: messages.getMessage('usernameLong', [], 'auth_jwt'),
        required: true
    }),
    jwtkeyfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('key', [], 'auth_jwt'),
        longDescription: messages.getMessage('keyLong', [], 'auth_jwt'),
        required: true
    }),
    clientid: command_1.flags.string({
        char: 'i',
        description: messages.getMessage('clientId', [], 'auth'),
        longDescription: messages.getMessage('clientIdLong', [], 'auth'),
        required: true
    }),
    instanceurl: command_1.flags.url({
        char: 'r',
        description: messages.getMessage('instanceUrl', [], 'auth'),
        longDescription: messages.getMessage('instanceUrlLong', [], 'auth')
    }),
    setdefaultdevhubusername: command_1.flags.boolean({
        char: 'd',
        description: messages.getMessage('setDefaultDevHub', [], 'auth'),
        longDescription: messages.getMessage('setDefaultDevHubLong', [], 'auth')
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('setDefaultUsername', [], 'auth'),
        longDescription: messages.getMessage('setDefaultUsernameLong', [], 'auth')
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('setAlias', [], 'auth'),
        longDescription: messages.getMessage('setAliasLong', [], 'auth')
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('noPrompt', [], 'demoMode'),
        longDescription: messages.getMessage('noPromptLong', [], 'demoMode'),
        required: false,
        hidden: true
    })
};

//# sourceMappingURL=grant.js.map
