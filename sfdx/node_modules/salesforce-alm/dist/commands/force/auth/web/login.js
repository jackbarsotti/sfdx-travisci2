"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const srcDevUtil = require("../../../../lib/core/srcDevUtil");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const core_1 = require("@salesforce/core");
const util = require("util");
const messages = Messages();
class AuthWebLoginCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        if (srcDevUtil.isSFDXContainerMode()) {
            throw new core_1.SfdxError(messages.getMessage('deviceWarning', [], 'auth'));
        }
        const context = await this.resolveLegacyContext();
        const heroku = require('heroku-cli-util');
        const AuthCommand = require('../../../../lib/auth/authCommand');
        const authCommand = new AuthCommand();
        if (!util.isNullOrUndefined(context.flags.clientid)) {
            return heroku
                .prompt(messages.getMessage('stdin', [], 'auth_weblogin'), {
                mask: !context.flags.disablemasking
            })
                .then(secret => {
                const map = new Map();
                map.set('secret', secret);
                return this.execLegacyCommand(authCommand, context, map);
            });
        }
        else {
            return this.execLegacyCommand(authCommand, context);
        }
    }
}
exports.AuthWebLoginCommand = AuthWebLoginCommand;
AuthWebLoginCommand.theDescription = messages.getMessage('description', [], 'auth_weblogin');
AuthWebLoginCommand.longDescription = messages.getMessage('longDescription', [], 'auth_weblogin');
AuthWebLoginCommand.help = messages.getMessage('help', [], 'auth_weblogin');
AuthWebLoginCommand.requiresProject = false;
AuthWebLoginCommand.flagsConfig = {
    clientid: command_1.flags.string({
        char: 'i',
        description: messages.getMessage('clientId', [], 'auth'),
        longDescription: messages.getMessage('clientIdLong', [], 'auth')
    }),
    instanceurl: command_1.flags.url({
        char: 'r',
        description: messages.getMessage('instanceUrl', [], 'auth'),
        longDescription: messages.getMessage('instanceUrlLong', [], 'auth')
    }),
    setdefaultdevhubusername: command_1.flags.boolean({
        char: 'd',
        description: messages.getMessage('setDefaultDevHub', [], 'auth'),
        longDescription: messages.getMessage('setDefaultDevHubLong', [], 'auth')
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('setDefaultUsername', [], 'auth'),
        longDescription: messages.getMessage('setDefaultUsernameLong', [], 'auth')
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('setAlias', [], 'auth'),
        longDescription: messages.getMessage('setAliasLong', [], 'auth')
    }),
    disablemasking: command_1.flags.boolean({
        description: messages.getMessage('disableMasking', [], 'auth_weblogin'),
        longDescription: messages.getMessage('disableMaskingLong', [], 'auth_weblogin'),
        hidden: true
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('noPrompt', [], 'demoMode'),
        longDescription: messages.getMessage('noPromptLong', [], 'demoMode'),
        required: false,
        hidden: true
    })
};

//# sourceMappingURL=login.js.map
