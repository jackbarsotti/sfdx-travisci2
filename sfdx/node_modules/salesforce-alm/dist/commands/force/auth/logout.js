"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const logger = require("../../../lib/core/logApi");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
class AuthLogoutCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const heroku = require('heroku-cli-util');
        const AuthLogoutCommand = require('../../../lib/auth/authLogoutCommand');
        const authLogoutCommand = new AuthLogoutCommand();
        if (context.flags.targetusername && context.flags.all) {
            const err = new Error(messages.getMessage('specifiedBothUserAndAllError', [], 'auth_logout'));
            err['name'] = 'SpecifiedBothUserAndAllError';
            return Promise.reject(err);
        }
        this.logger = logger.child('auth_logout');
        return authLogoutCommand.getOrgsToLogout(context, this.logger).then(orgsToLogout => {
            context.orgsToLogout = orgsToLogout;
            // don't prompt yes/no if we're forcing the delete request, just execute
            if (context.flags.noprompt || core_1.Global.getEnvironmentMode() === core_1.Mode.DEMO) {
                return this.execLegacyCommand(authLogoutCommand, context);
            }
            else {
                return heroku
                    .prompt(messages.getMessage('logoutCommandYesNo', [authLogoutCommand.getStyledList(orgsToLogout)], 'auth_logout'))
                    .then(answer => {
                    if (answer.toUpperCase() === 'YES' || answer.toUpperCase() === 'Y') {
                        return this.execLegacyCommand(authLogoutCommand, context);
                    }
                    return undefined;
                });
            }
        });
    }
}
exports.AuthLogoutCommand = AuthLogoutCommand;
AuthLogoutCommand.theDescription = messages.getMessage('description', [], 'auth_logout');
AuthLogoutCommand.longDescription = messages.getMessage('longDescription', [], 'auth_logout');
AuthLogoutCommand.help = messages.getMessage('help', [], 'auth_logout');
AuthLogoutCommand.requiresProject = false;
AuthLogoutCommand.requiresUsername = false;
AuthLogoutCommand.supportsUsername = true;
AuthLogoutCommand.flagsConfig = {
    all: command_1.flags.boolean({
        char: 'a',
        description: messages.getMessage('all', [], 'auth_logout'),
        longDescription: messages.getMessage('allLong', [], 'auth_logout'),
        required: false
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('noPrompt', [], 'auth_logout'),
        longDescription: messages.getMessage('noPromptLong', [], 'auth_logout'),
        required: false
    })
};

//# sourceMappingURL=logout.js.map
