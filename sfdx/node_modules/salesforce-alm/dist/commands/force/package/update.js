"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
const consts = require("../../../lib/core/constants");
class PackageUpdateCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageUpdateCommand = require('../../../lib/package/packageUpdateCommand');
        return this.execLegacyCommand(new PackageUpdateCommand(), context);
    }
}
exports.PackageUpdateCommand = PackageUpdateCommand;
PackageUpdateCommand.theDescription = messages.getMessage('cliDescription', [], 'package_update');
PackageUpdateCommand.longDescription = messages.getMessage('cliLongDescription', [], 'package_update');
PackageUpdateCommand.help = messages.getMessage('help', [], 'package_update');
PackageUpdateCommand.orgType = consts.DEFAULT_DEV_HUB_USERNAME;
PackageUpdateCommand.requiresDevhubUsername = true;
PackageUpdateCommand.requiresProject = true;
PackageUpdateCommand.flagsConfig = {
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package', [], 'package_update'),
        longDescription: messages.getMessage('packageLong', [], 'package_update'),
        required: true
    }),
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('name', [], 'package_update'),
        longDescription: messages.getMessage('nameLong', [], 'package_update'),
        required: false
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('description', [], 'package_update'),
        longDescription: messages.getMessage('descriptionLong', [], 'package_update'),
        required: false
    })
};

//# sourceMappingURL=update.js.map
