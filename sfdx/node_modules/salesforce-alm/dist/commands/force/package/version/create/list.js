"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../../ToolbeltCommand");
const messages = Messages();
const consts = require("../../../../../lib/core/constants");
class PackageVersionCreateListCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageVersionCreateRequestListCommand = require('../../../../../lib/package/packageVersionCreateRequestListCommand');
        return this.execLegacyCommand(new PackageVersionCreateRequestListCommand(), context);
    }
}
exports.PackageVersionCreateListCommand = PackageVersionCreateListCommand;
PackageVersionCreateListCommand.theDescription = messages.getMessage('cliDescription', [], 'package_version_create_list');
PackageVersionCreateListCommand.longDescription = messages.getMessage('cliLongDescription', [], 'package_version_create_list');
PackageVersionCreateListCommand.help = messages.getMessage('help', [], 'package_version_create_list');
PackageVersionCreateListCommand.requiresProject = false;
PackageVersionCreateListCommand.orgType = consts.DEFAULT_DEV_HUB_USERNAME;
PackageVersionCreateListCommand.requiresDevhubUsername = true;
PackageVersionCreateListCommand.flagsConfig = {
    createdlastdays: command_1.flags.number({
        char: 'c',
        description: messages.getMessage('createdLastDaysDescription', [], 'packaging'),
        longDescription: messages.getMessage('createdLastDaysLongDescription', [], 'packaging'),
        required: false
    }),
    status: command_1.flags.enum({
        char: 's',
        description: messages.getMessage('statusDescription', [], 'package_version_create_list'),
        longDescription: messages.getMessage('statusLongDescription', [], 'package_version_create_list'),
        required: false,
        options: ['Queued', 'InProgress', 'Success', 'Error']
    })
};

//# sourceMappingURL=list.js.map
