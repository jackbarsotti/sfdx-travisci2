"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'package_hammertest_run');
class PackageHammertestRunCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const HammerTestRunCommand = require('../../../../lib/package/hammerTestRunCommand');
        return this.execLegacyCommand(new HammerTestRunCommand(), context);
    }
}
exports.PackageHammertestRunCommand = PackageHammertestRunCommand;
PackageHammertestRunCommand.theDescription = messages.getMessage('cliDescription');
PackageHammertestRunCommand.longDescription = messages.getMessage('cliLongDescription');
PackageHammertestRunCommand.help = messages.getMessage('help');
PackageHammertestRunCommand.requiresUsername = true;
PackageHammertestRunCommand.requiresProject = true;
PackageHammertestRunCommand.flagsConfig = {
    packageversionids: command_1.flags.array({
        char: 'i',
        description: messages.getMessage('packageversionids'),
        longDescription: messages.getMessage('packageversionidsLong'),
        required: true
    }),
    subscriberorgs: command_1.flags.array({
        char: 's',
        description: messages.getMessage('subscriberorgs'),
        longDescription: messages.getMessage('subscriberorgsLong'),
        required: false
    }),
    subscriberfile: command_1.flags.string({
        char: 'f',
        description: messages.getMessage('subscriberfile'),
        longDescription: messages.getMessage('subscriberfileLong'),
        required: false
    }),
    scheduledrundatetime: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('scheduledrundatetime'),
        longDescription: messages.getMessage('scheduledrundatetimeLong'),
        required: false
    }),
    preview: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('preview'),
        longDescription: messages.getMessage('previewLong'),
        required: false
    }),
    apextests: command_1.flags.boolean({
        char: 't',
        description: messages.getMessage('apextests'),
        longDescription: messages.getMessage('apextestsLong'),
        required: false
    }),
    apextestinterface: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('apextestInterface'),
        longDescription: messages.getMessage('apextestinterfaceLong'),
        required: false
    })
};

//# sourceMappingURL=run.js.map
