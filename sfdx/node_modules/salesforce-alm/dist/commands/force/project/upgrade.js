"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
class ProjectUpgradeCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const heroku = require('heroku-cli-util');
        const upgrades = require('../../../lib/project/upgrades');
        return this.execLegacyCommand({
            execute: () => upgrades(heroku.prompt, context.flags.forceupgrade)
        }, context);
    }
}
exports.ProjectUpgradeCommand = ProjectUpgradeCommand;
ProjectUpgradeCommand.theDescription = messages.getMessage('commandDescription', [], 'projectUpgrade');
ProjectUpgradeCommand.longDescription = messages.getMessage('commandDescriptionLong', [], 'projectUpgrade');
ProjectUpgradeCommand.help = messages.getMessage('commandHelp', [], 'projectUpgrade');
ProjectUpgradeCommand.requiresProject = false;
ProjectUpgradeCommand.flagsConfig = {
    forceupgrade: command_1.flags.boolean({
        char: 'f',
        description: messages.getMessage('forceOption', [], 'projectUpgrade'),
        longDescription: messages.getMessage('forceOptionLong', [], 'projectUpgrade'),
        required: false
    })
};

//# sourceMappingURL=upgrade.js.map
