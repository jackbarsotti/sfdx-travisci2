/**
 * The is the stream listener for a container async result status.
 * @param orgApi - The hubOrg.
 * @constructor
 */
declare class StreamClient {
    static readonly SFDX_ENABLE_FAYE_COOKIES_ALLOW_ALL_PATHS = "SFDX_ENABLE_FAYE_REQUEST_RESPONSE_LOGGING";
    static readonly SFDX_ENABLE_FAYE_REQUEST_RESPONSE_LOGGING = "SFDX_ENABLE_FAYE_REQUEST_RESPONSE_LOGGING";
    private orgApi;
    private client;
    private logger;
    private isHandshakeComplete;
    private shouldDisconnect;
    private _defaultWaitInMinutes;
    private _waitInMinutes;
    private timeout;
    private streamingImpl;
    private env;
    constructor(orgApi: any, streamingImpl?: any);
    /**
     * Returns the specified waitInMinutes or the default
     * @returns {*|*|number}
     */
    getRuntimeWait(): any;
    /**
     * Return the "default" waitTimeout. This value is used if waitTimeout is not provided.
     * @returns {number}
     */
    get defaultWaitInMinutes(): any;
    /**
     * sets the "default" waitTimeOut to use if no waitTimeout is provided.
     * @param value {number} - value of the default timeout
     */
    set defaultWaitInMinutes(value: any);
    /**
     * Specifies a wait timeout to use. This trumps whatever is set for the default wait timeout.
     * @returns {number}
     */
    get waitInMinutes(): any;
    /**
     * sets the waitTimeOut to use. Overrides the default
     * @param value {number} - value of the default timeout
     */
    set waitInMinutes(value: any);
    static validateWaitValue(value: any): number;
    subscribe(topic: string, callback: any, returnHandshakePromise?: boolean, timeoutInMillis?: number): any;
    disconnect(): void;
}
export = StreamClient;
