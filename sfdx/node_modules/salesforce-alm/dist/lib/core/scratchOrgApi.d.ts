/**
 * Represents a config json file in the state folder that consumers can interact with.
 *
 * TODO Extract out
 * TODO Make async. Has huge implications on source*.js files
 * TODO remove config with workspace.js in sfdx-core
 */
declare class StateFile {
    [property: string]: any;
    constructor(config: any, filePath: any, contents?: {});
    _read(filePath: any): any;
    _write(filePath: any, contents: any): void;
    _exist(filePath: any): any;
    _delete(filePath: any): any;
    read(): any;
    write(newContents: any): any;
    exist(): any;
    delete(): any;
    backup(): void;
    revert(): any;
}
/**
 * @deprecated The functionality is moving to sfdx-core
 */
declare class Org {
    [property: string]: any;
    /**
     * Org types that can be set as a default for local and global configs.
     * All commands target USERNAME, except commands that specify a different
     * default, like org:create specifing DEVHUB has a default.
     */
    static Defaults: {
        DEVHUB: string;
        USERNAME: string;
        list(): string[];
    };
    /**
     * Construct a new org. No configuration is initialized at this point. To
     * get any auth data, getConfig must first be called which will try to get
     * the default org of the given type unless the setName method is called.
     * Any calls to org.force will call getConfig.
     *
     * @param {Force} force The force api
     * @param {string} type The type of org for the CLI. This is used to store
     * and find defaults for the project.
     * @constructor
     */
    constructor(force?: any, type?: string);
    retrieveMaxApiVersion(): any;
    /**
     * Gets the name of this scratch org.
     */
    getName(): any;
    resolveDefaultName(): any;
    /**
     * Sets the name of this scratch org. After setting the name any call to getConfig will result in the org associated
     * with $HOME/.sfdx/[name].json being returned.
     * @param name - the name of the org.
     */
    setName(name: any): void;
    resolvedAggregator(): Promise<any>;
    /**
     * Get if this org is the actual workspace org. The WORKSPACE type is set by default
     * so we can retrive the workspace org by default when getConfig is called. However,
     * if someone wants to know if an org is actually a workspace org, we need to make sure
     * that the current username is the actual name in the sfdx-config.json, otherwise
     * it is not the workspace org, even if it should be but isn't saved yet. i.e.
     * setName is called after which happens if the --username falg is set.
     */
    isWorkspaceOrg(): boolean;
    getDataPath(filename?: any): string;
    /**
     * Clean all data files in the org's data path, then remove the data directory.
     * Usually <workspace>/.sfdx/orgs/<username>
     */
    cleanData(orgDataPath: any): void;
    /**
     * Get the full path to the file storing the maximum revision value from the last valid pull from workspace scratch org
     * @param wsPath - The root path of the workspace
     * @returns {*}
     */
    getMaxRevision(): StateFile;
    /**
     * Get the full path to the file storing the workspace source path information
     * @param wsPath - The root path of the workspace
     * @returns {*}
     */
    getSourcePathInfos(): StateFile;
    /**
     * Get the full path to the file storing the workspace metadata typeDefs
     * @param wsPath - The root path of the workspace
     * @returns {*}
     */
    getMetadataTypeInfos(): StateFile;
    /**
     * Returns a promise to retrieve the ScratchOrg configuration for this workspace.
     * @returns {BBPromise}
     */
    getConfig(): any;
    /**
     * Removes the scratch org config file at $HOME/.sfdx/[name].json, any project level org
     * files, all user auth files for the org, matching default config settings, and any
     * matching aliases.
     * @deprecated See Org.ts in sfdx-core
     */
    deleteConfig(): any;
    getFileName(): string;
    /**
     * Returns a promise to save a valid workspace scratch org configuration to disk.
     * @param configObject - The object to save. If the object isn't valid an error will be thrown.
     * { orgId:, redirectUri:, accessToken:, refreshToken:, instanceUrl:, clientId: }
     * @param saveAsDefault {boolean} - whether to save this org as the default for this workspace.
     * @returns {BBPromise.<Object>} Not the access tokens will be encrypted. Call get config to get decrypted access tokens.
     */
    saveConfig(configObject: any, saveAsDefault?: any): any;
    saveAsDefault(): any;
    /**
     *  Check that this org is a scratch org by asking the dev hub if it knows about this org.
     *  @param devHubUsername - the username of the dev hub org
     *  @returns {BBPromise<Config>}
     *  @deprecated See Org.ts in sfdx-core
     */
    checkScratchOrg(devHubUsername: any): any;
    /**
     * Refresh a users access token.
     * @returns {*|BBPromise.<{}>}
     * @deprecated See Org.ts in sfdx-core
     */
    refreshAuth(): any;
    /** Use the settings to generate a package ZIP and deploy it to the scratch org.
     * @param settings the settings generator
     * @returns {*|BBPromise.<{}>}
     */
    applySettings(settings: any, apiVersion: any): any;
    /**
     *  Reads and returns the global, hidden org file in $HOME/.sfdx for this org.
     *    E.g., $HOME/.sfdx/00Dxx0000001gPFEAY.json
     *  @returns {Object} - The contents of the org file, or an empty object if not found.
     */
    readOrgFile(): any;
    /**
     *  Reads and returns the content of all user auth files for this org.
     *  @returns {Array} - An array of all user auth file content.
     *  @deprecated - See AuthInfo.ts in sfdx-core
     */
    readUserAuthFiles(): any;
    /**
     * Returns Org object representing this org's Dev Hub org.
     *
     *  @returns {Org} - Org object or null if org is not affiliated to a Dev Hub (according to local config).
     *  @deprecated - See org.ts in sfdx-core
     */
    getDevHubOrg(): any;
    /**
     * Returns true if org if a Dev Hub.
     *
     *  @returns Boolean
     */
    isDevHubOrg(): any;
    /**
     * Returns Org object representing this org's Dev Hub org.
     *
     *  @returns {Org} - Org object or null if org is not affiliated to a Dev Hub (according to local config).
     */
    getAppHub(): any;
    /**
     * Returns the regular expression that filters files stored in $HOME/.sfdx
     * @returns {RegExp} - The auth file name filter regular expression
     */
    static getAuthFilenameFilterRegEx(): RegExp;
    /**
     * The intent of the function is to determine if a user has authenticated at least once. The only way to really do this
     * is to check to see if there are any org files. If so, then we can assume there is a keychain in use only if there is
     * no generic keychain file. This covers the new install or reset case.
     */
    static hasAuthentications(): any;
    /**
     * returns a list of all username auth file's stored in $HOME/.sfdx
     * @deprecated See Org.js and Auth.js in sfdx-core
     */
    static readAllUserFilenames(): any;
    /**
     * Returns a data structure containing all devhubs and scratch orgs stored locally in $HOME/.sfdx
     * @param {array} userFilenames - use readAllUserFilenames() to get a list of everything configured locally. This also
     * supports providing a subset of filenames which is useful if one only wants status information on one org. We can
     * limit unnecessary calls to the server.
     * @param {number} concurrency - the max number of requests that can be sent to the server at a time.
     * @returns {BBPromise.<*>}
     */
    static readMapOfLocallyValidatedMetaConfig(userFilenames: any, concurrency?: number): any;
    /**
     * this methods takes all locally configured orgs and organizes them into the following buckets:
     * { devHubs: [{}], nonScratchOrgs: [{}], scratchOrgs: [{}] }
     * @param [{string}] - an array of strings that are validated for devHubs against the server.
     * @param {number} concurrency - this is the max batch number of http requests that will be sent to the server for
     * the scratchOrgInfo query.
     * @param {string[]|null} excludeProperties - properties to exclude from the configs defaults. ['refreshToken', 'clientSecret']. Specify null to include all properties.
     */
    static readLocallyValidatedMetaConfigsGroupedByOrgType(userFilenames: any, concurrency?: number, excludeProperties?: any): any;
    /**
     * Determines the value of the status field that is reported to the user
     * @param {object} val - the scratchOrg
     * @param {map} devHubs - a map of devhubs found locally.
     */
    static computeAndUpdateStatusForMetaConfig(val: any, devHubs: any): void;
    /**
     * @deprecated See Org.ts in sfdx-core
     */
    static create(username?: any, defaultType?: any): Promise<Org>;
}
export = Org;
