import { Connection } from 'jsforce';
export interface DebugLog {
    attributes: Object;
    Id: string;
    Application: string;
    DurationMilliseconds: number;
    Location: string;
    LogLength: string;
    LogUser: Object;
    Operation: string;
    Request: string;
    StartTime: string;
    Status: string;
}
export declare class ApexLogApi {
    private org;
    private force;
    private flags;
    private logger;
    /**
     * The API class that manages listing, getting, tailing Apex Debug logs.
     *
     * @param org {object} org from which to retrieve logs.
     */
    constructor(org: any, flags?: any);
    tail(): Promise<unknown>;
    prepareTraceFlag(debugLevel: string): Promise<any>;
    _getDebugLevelId(debugLevel: string): Promise<any>;
    _getUserId(username: string): Promise<string>;
    _getTraceFlag(userId: string): Promise<any>;
    _createTraceFlag(userId: string): Promise<any>;
    _streamingCallback(message: any): Promise<void>;
    _handleTailMessage(logId: string): Promise<any>;
    /**
     * fetch body of specific debug log
     * exposed for unit testing (mocked)
     * @param logId {string} logId - the debug log to retrieve
     */
    logLog(logId: string): Promise<any>;
    /**
     * Output log bodies of last N number of logs
     * @param numOfLogs {number} number of logs to retrieve
     */
    logLogs(numOfRecentLogs: number): Promise<any>;
    _colorizeLog(log: string): string | string[];
    _applyColor(colorFn: any, logLinePart: string): any;
    /**
     * fetch body of specific debug log
     * exposed for unit testing (mocked)
     * @param logId {string} logId - the debug log to retrieve
     */
    getLogById(logId: string): Promise<any>;
    /**
     * fetch most recent log records for given count
     * exposed for unit testing (mocked)
     * @param numOfRecentLogs {number} number of logs to retrieve
     */
    getRecentLogRecords(numOfRecentLogs: number): Promise<any>;
    _createLogListUrl(conn: Connection, numOfRecentLogs?: number): string;
    _getReq(conn: Connection, geturl: string, callback: (res: any) => void): Promise<void>;
    /**
     * fetch summary information for all debug logs
     * exposed for unit testing (mocked)
     */
    listLogs(): Promise<DebugLog[]>;
    _hasRecords(result: any): boolean;
}
