/// <reference path="../../../typings/modules/request/index.d.ts" />
import { AsyncCreatable } from '@salesforce/kit';
import * as requestPromise from 'request-promise-native';
interface BaseRequest {
    method: string;
    url: string;
}
export interface DeviceCodeResponse {
    device_code: string;
    interval: number;
    user_code: string;
    verification_uri: string;
}
interface DeviceCodeFormParams {
    client_id: string;
    response_type?: string;
    code?: string;
    grant_type?: string;
    scope?: string;
}
export interface DeviceCodeRequest extends BaseRequest {
    form: DeviceCodeFormParams;
}
export interface DeviceCodePollingResponse {
    access_token: string;
    refresh_token: string;
    signature: string;
    scope: string;
    instance_url: string;
    id: string;
    token_type: string;
    issued_at: string;
}
export interface DeviceLoginOptions {
    clientid?: string;
    loglevel: string;
    instanceurl?: string;
    setalias?: string;
    setdefaultdevhubusername?: boolean;
    setdefaultusername?: boolean;
}
export interface AuthInfoResponse {
    orgId: string;
    accessToken?: string;
    refreshToken?: string;
    instanceUrl: string;
    loginUrl: string;
    username: string;
    clientId: string;
}
export declare class DeviceFlowService extends AsyncCreatable<DeviceLoginOptions> {
    static RESPONSE_TYPE: string;
    static GRANT_TYPE: string;
    static SCOPE: string;
    static getLoginOptions(deviceFlowRequestUrl: string, clientId: string): {
        method: string;
        url: string;
        form: DeviceCodeFormParams;
        json: boolean;
    };
    static getPollingOptions(deviceFlowUrl: string, loginData: DeviceCodeResponse, clientId: string): DeviceCodeRequest;
    private static DEFAULT_CLIENT_ID;
    private static POLLING_COUNT_MAX;
    private loginHost;
    private _force;
    private logger;
    request: import("request").RequestAPI<requestPromise.RequestPromise, requestPromise.RequestPromiseOptions, import("request").RequiredUriUrl>;
    timeout: any;
    pollingCount: number;
    clientId: string;
    instanceUrl: string;
    logLevel: string;
    setDefaultUsername: boolean;
    setDefaultDevhubUsername: boolean;
    alias: string;
    constructor(options: DeviceLoginOptions);
    getDeviceFlowRequestUrl(instanceUrl: string): Promise<string>;
    getUserProfileUrl(instanceUrl: string): Promise<string>;
    protected init(): Promise<void>;
    get force(): any;
    set force(force: any);
    static getType(deviceFlowService: DeviceFlowService): any;
    /**
     * TODO: This would be a good method to share between web and device auth
     * @param force
     * @param instanceUrl
     */
    static getInstanceUrl(force: any, instanceUrl: any): Promise<any>;
    logHelper(level: any, append: any): void;
    requestDeviceLogin(): Promise<DeviceCodeResponse>;
    createPollingFunction(interval: number, resolve: Function, reject: Function, pollingOptions: DeviceCodeRequest): any;
    startPolling(resolve: any, reject: any, loginData: any, pollingOptions: any): void;
    awaitDeviceApproval(loginData: DeviceCodeResponse): Promise<DeviceCodePollingResponse>;
    getDeviceApproval(pollingOptions: DeviceCodeRequest): Promise<DeviceCodePollingResponse>;
    authorizeAndSave(approval: DeviceCodePollingResponse, clientSecret: string): Promise<AuthInfoResponse>;
    doSetAlias(username: any): Promise<any>;
}
export {};
