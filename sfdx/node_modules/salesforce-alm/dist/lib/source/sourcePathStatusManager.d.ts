import MetadataRegistry = require('./metadataRegistry');
import { ForceIgnore } from './forceIgnore';
import { Logger } from '@salesforce/core';
import { AsyncCreatable } from '@salesforce/kit';
import { PackageInfoCache } from './packageInfoCache';
import { Workspace } from './workspace';
interface SourcePathStatusManagerOptions {
    org: any;
    isStateless?: boolean;
}
interface Filter {
    changesOnly?: boolean;
    packageDirectory?: string;
    sourcePath?: string;
}
interface SourcePathInfoOptions {
    deferContentHash?: boolean;
    sourcePath?: string;
    isDirectory?: boolean;
    size?: number;
    modifiedTime?: string;
    changeTime?: string;
    contentHash?: string;
    isMetadataFile?: boolean;
    state?: string;
    isWorkspace?: boolean;
    isArtifactRoot?: boolean;
    package?: string;
    metadataType?: string;
}
export declare class SourcePathInfo extends AsyncCreatable<SourcePathInfoOptions> {
    sourcePath: string;
    isDirectory: boolean;
    size: number;
    modifiedTime: string;
    changeTime: string;
    contentHash: string;
    isMetadataFile: boolean;
    state: string;
    isWorkspace: boolean;
    isArtifactRoot: boolean;
    package: string;
    packageInfoCache: PackageInfoCache;
    metadataType: string;
    deferContentHash?: boolean;
    constructor(options: SourcePathInfoOptions);
    protected init(): Promise<void>;
    /**
     * Return a clone of this SourcePathInfo, overriding specified properties.
     * @param overrides SourcePathInfoOptions that should override the cloned properties
     */
    clone(overrides?: SourcePathInfoOptions): SourcePathInfo;
    /**
     * Initialize path info based on a path in the workspace
     */
    initFromPath(sourcePath: string, deferContentHash?: boolean): Promise<void>;
    computeContentHash(): Promise<void>;
    /**
     * If the source has been modified, return the path info for the change
     */
    getPendingPathInfo(): Promise<SourcePathInfo>;
    isDeleted(): boolean;
    isNew(): boolean;
    isChanged(): boolean;
    getState(): string;
}
/**
 * Manages a data model for tracking changes to local workspace paths
 */
export declare class SourcePathStatusManager extends AsyncCreatable<SourcePathStatusManagerOptions> {
    logger: Logger;
    fileMoveLogger: Logger;
    org: any;
    isStateless: boolean;
    workspacePath: string;
    forceIgnore: ForceIgnore;
    workspace: Workspace;
    static metadataRegistry: MetadataRegistry;
    private packageInfoCache;
    constructor(options: SourcePathStatusManagerOptions);
    protected init(): Promise<void>;
    /**
     * Get path infos for the source workspace, applying any filters specified.
     */
    getSourcePathInfos(filter?: Filter): Promise<SourcePathInfo[]>;
    private processFileMoves;
    /**
     * Update the data model with changes
     */
    commitChangedPathInfos(sourcePathInfos: SourcePathInfo[]): Promise<void>;
    /**
     * Update data model for the given paths
     */
    updateInfosForPaths(updatedPaths: string[], deletedPaths: string[]): Promise<void>;
    backup(): Promise<void>;
    revert(): Promise<void>;
    /**
     * Get the path infos for source that has been updated in the given directory
     */
    private processChangedDirectory;
    /**
     * Get the path infos for newly added source
     */
    private getNewPathInfos;
}
export {};
