import { AggregateSourceElement } from './aggregateSourceElement';
import { WorkspaceElement } from './workspaceElement';
export declare type PackageName = string;
export declare type SourceElementKey = string;
export declare type AggregateSourceElementMap = Map<SourceElementKey, AggregateSourceElement>;
declare type AggregateSourceElementEntries = [PackageName, AggregateSourceElementMap][] | null;
export declare class AggregateSourceElements extends Map<PackageName, AggregateSourceElementMap> {
    constructor(entries?: AggregateSourceElementEntries);
    /**
     * DO NOT USE. Use getSourceElement instead.
     * Returns the FIRST matching AggregateSourceElement. We should not use this method
     * because you're not guaranteed to get the source element from the correct package.
     */
    findSourceElementByKey(key: SourceElementKey): AggregateSourceElement;
    getSourceElement(packageName: PackageName, key: SourceElementKey): AggregateSourceElement;
    deleteSourceElement(packageName: PackageName, key: SourceElementKey): this;
    setIn(packageName: PackageName, sourceElementKey: SourceElementKey, sourceElement: AggregateSourceElement): this;
    /**
     * Returns a flat array of all source elements across all packages
     */
    getAllSourceElements(): AggregateSourceElement[];
    getAllWorkspaceElements(): WorkspaceElement[];
    getAllSourceKeys(): SourceElementKey[];
    isEmpty(): boolean;
    merge(aggregateSourceElements: AggregateSourceElements): this;
}
export {};
