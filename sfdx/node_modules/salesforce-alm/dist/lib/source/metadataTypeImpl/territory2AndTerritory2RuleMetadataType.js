"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const defaultMetadataType_1 = require("./defaultMetadataType");
const PathUtil = require("../sourcePathUtil");
const MetadataRegistry = require("../metadataRegistry");
const territory2ModelDefaultDir = 'territory2Models'; // This should not need to be hardcoded when the MetadataRegistry becomes static
class Territory2AndTerritory2RuleMetadataType extends defaultMetadataType_1.DefaultMetadataType {
    getFullNameFromFilePath(filePath) {
        return this.getAggregateFullNameFromFilePath(filePath);
    }
    getAggregateFullNameFromFilePath(filePath) {
        const modelName = PathUtil.getGrandparentDirectoryName(filePath);
        const territoryName = PathUtil.getFileName(filePath);
        //need to check modelName for a windows specific issue
        return modelName === 'undefined' ? territoryName : `${modelName}.${territoryName}`;
    }
    getDefaultAggregateMetadataPath(fullName, defaultSourceDir, bundleFileProperties) {
        const nameParts = fullName.split('.');
        const modelName = nameParts[0];
        const fileName = `${nameParts[1]}.${this.typeDefObj.ext}${MetadataRegistry.getMetadataFileExt()}`;
        if (modelName === 'undefined') {
            return path.join(defaultSourceDir, territory2ModelDefaultDir, `${this.typeDefObj.defaultDirectory}`, fileName);
        }
        return path.join(defaultSourceDir, territory2ModelDefaultDir, modelName, `${this.typeDefObj.defaultDirectory}`, fileName);
    }
    getPathToMdapiSourceDir(aggregateFullName, mdDir) {
        return path.join(mdDir, territory2ModelDefaultDir, aggregateFullName.split('.')[0], this.typeDefObj.defaultDirectory);
    }
    getAggregateFullNameFromFileProperty(fileProperty, namespace) {
        if (fileProperty.fullName) {
            return fileProperty.fullName;
        }
        // In the case of mdapiPull, the mdapi does not return a fullName in the fileProperty for
        // territory2Rule and territory2 entities. In this case, generate it from the fileName.
        const filePropertyFileName = PathUtil.replaceForwardSlashes(fileProperty.fileName);
        const modelName = filePropertyFileName.split(path.sep)[2];
        const name = path.basename(filePropertyFileName).split('.')[0];
        return modelName === 'undefined' ? name : `${modelName}.${name}`;
    }
    getAggregateFullNameFromMdapiPackagePath(mdapiPackagePath) {
        const pathElements = mdapiPackagePath.split(path.sep);
        if (pathElements.length === 4) {
            const modelName = pathElements[pathElements.length - 3];
            const ruleOrTerritoryName = PathUtil.getFileName(pathElements[pathElements.length - 1]);
            return modelName === 'undefined' ? ruleOrTerritoryName : `${modelName}.${ruleOrTerritoryName}`;
        }
        return null;
    }
}
exports.Territory2AndTerritory2RuleMetadataType = Territory2AndTerritory2RuleMetadataType;

//# sourceMappingURL=territory2AndTerritory2RuleMetadataType.js.map
