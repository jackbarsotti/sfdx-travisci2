"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const defaultMetadataType_1 = require("./defaultMetadataType");
const PathUtil = require("../sourcePathUtil");
const bundlePathHelper_1 = require("../bundlePathHelper");
class BundleMetadataType extends defaultMetadataType_1.DefaultMetadataType {
    constructor(typeDefObj) {
        super(typeDefObj);
    }
    getFullNameFromFilePath(filePath) {
        return bundlePathHelper_1.BundlePathHelper.buildFullNameFromFilePath(filePath, this.typeDefObj.defaultDirectory);
    }
    getAggregateFullNameFromFilePath(filePath) {
        return bundlePathHelper_1.BundlePathHelper.scanFilePathForAggregateFullName(filePath, this.typeDefObj.defaultDirectory);
    }
    getAggregateFullNameFromMdapiPackagePath(mdapiPackagePath) {
        return PathUtil.getParentDirectoryName(mdapiPackagePath);
    }
    getAggregateMetadataFilePathFromWorkspacePath(filePath) {
        return bundlePathHelper_1.BundlePathHelper.findMetadataFilePathInBundleDir(filePath, this.typeDefObj.defaultDirectory);
    }
    getDefaultAggregateMetadataPath(fullName, defaultSourceDir, bundleFileProperties) {
        return bundlePathHelper_1.BundlePathHelper.getPathFromBundleTypeFileProperties(fullName, defaultSourceDir, this.typeDefObj.defaultDirectory, bundleFileProperties);
    }
    getAggregateFullNameFromSourceMemberName(sourceMemberName) {
        return sourceMemberName.split(path.sep)[0];
    }
    getAggregateFullNameFromWorkspaceFullName(workspaceFullName) {
        return workspaceFullName.split(path.sep)[0];
    }
    getAggregateFullNameFromFileProperty(fileProperty, namespace) {
        return fileProperty.fullName.split(path.sep)[0];
    }
    getPathToMdapiSourceDir(aggregateFullName, mdDir) {
        return path.join(mdDir, this.typeDefObj.defaultDirectory, aggregateFullName);
    }
    getOriginContentPathsForSourceConvert(metadataFilePath, workspaceVersion, unsupportedMimeTypes, forceIgnore) {
        const bundleDirPath = path.dirname(metadataFilePath);
        return Promise.resolve(bundlePathHelper_1.BundlePathHelper.getAllNestedBundleContentPaths(bundleDirPath, forceIgnore));
    }
    // E.g. for a bundle with fullname=testbundle and an error in the helper the MD API response will contain:
    // "fileName": "metadataPackage_1497651865666/aura/testbundle/testbundleHelper.jss",
    // "fullName": "testbundle",
    getAggregateFullNameFromComponentFailure(componentFailure) {
        return this.getAggregateFullNameFromFilePath(componentFailure.fileName);
    }
    getWorkspaceFullNameFromComponentFailure(componentFailure) {
        return this.getFullNameFromFilePath(componentFailure.fileName);
    }
    handleSlashesForSourceMemberName(sourceMemberFullName) {
        return PathUtil.replaceForwardSlashes(sourceMemberFullName);
    }
    sourceMemberFullNameCorrespondsWithWorkspaceFullName(sourceMemberFullName, workspaceFullName) {
        return sourceMemberFullName === workspaceFullName;
    }
    isDefinitionFile(filePath, metadataRegistry) {
        // default implementation just returns false
        return false;
    }
    static getDefinitionProperties(fileProperties, metadataRegistry) {
        const { MetadataTypeFactory } = require('../metadataTypeFactory');
        return fileProperties
            .filter(fileProperty => {
            const metadataType = MetadataTypeFactory.getMetadataTypeFromMetadataName(fileProperty.type, metadataRegistry);
            if (metadataType instanceof BundleMetadataType) {
                return metadataType.isDefinitionFile(fileProperty.fileName, metadataRegistry);
            }
            return false;
        })
            .map(fileProperty => {
            fileProperty.fullName = PathUtil.replaceForwardSlashes(fileProperty.fullName);
            fileProperty.fileName = PathUtil.replaceForwardSlashes(fileProperty.fileName);
            return fileProperty;
        });
    }
}
exports.BundleMetadataType = BundleMetadataType;

//# sourceMappingURL=bundleMetadataType.js.map
