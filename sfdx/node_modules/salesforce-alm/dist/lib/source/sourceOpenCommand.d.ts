import MetadataRegistry = require('./metadataRegistry');
import OrgOpenCommand = require('../org/orgOpenCommand');
export interface UrlObject {
    url: string;
    orgId: string;
    username: string;
}
export declare class SourceOpenCommand {
    constructor();
    validate(context: any): void;
    execute(context: any): Promise<any>;
}
export declare class SourceOpenOperation {
    private context;
    private _factory;
    constructor(context: any, factory?: StrategyFactory);
    private set factory(value);
    private get factory();
    execute(): Promise<UrlObject>;
}
export declare function remapError(e: Error): Error;
export declare function isSalesforceOneEnabled(cmd: OrgOpenCommand, requestApi: any, context: any): Promise<boolean>;
export declare class StrategyFactory {
    private context;
    private metadataRegistry;
    constructor(context: any, metadataRegistry: MetadataRegistry);
    strategize(): EditStrategy;
}
export interface EditStrategy {
    open(): Promise<UrlObject>;
}
export declare class FlexipageStrategy implements EditStrategy {
    private static NO_ID;
    private context;
    private cmd;
    constructor(context: any, cmd: OrgOpenCommand);
    deriveFlexipageURL(flexipage: string): Promise<string | undefined>;
    setUpOpenContext(): Promise<any>;
    open(): Promise<UrlObject>;
}
export declare class DefaultStrategy implements EditStrategy {
    private context;
    private cmd;
    constructor(context: any, cmd: OrgOpenCommand);
    open(): Promise<UrlObject>;
}
