"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const messages = require("../messages");
const syncCommandHelper = require("./syncCommandHelper");
const MetadataRegistry = require("./metadataRegistry");
const logger = require("../core/logApi");
const srcStatusApi_1 = require("./srcStatusApi");
const MaxRevision_1 = require("./MaxRevision");
const { Messages } = require('@salesforce/core');
Messages.importMessagesDirectory(__dirname);
function SrcStatusCommand(context) {
    this.scratchOrg = context.org;
    this.force = this.scratchOrg.force;
    this.projectPath = this.force.config.getProjectPath();
    this.messages = messages(this.force.config.getLocale());
    this.logger = logger.child('source:status');
}
SrcStatusCommand.prototype.reject = function reject(...args) {
    const msg = this.messages.getMessage(...args);
    return Promise.reject(new Error(msg));
};
SrcStatusCommand.prototype.execute = async function execute(options) {
    const rows = [];
    const maxRevision = await MaxRevision_1.MaxRevision.getInstance({ username: this.scratchOrg.name });
    await MetadataRegistry.initializeMetadataTypeInfos(this.scratchOrg);
    const api = await srcStatusApi_1.SrcStatusApi.create({ org: this.scratchOrg });
    let newOptions = options || {};
    await api.doStatus(newOptions);
    // update the serverMaxRevision
    await maxRevision.setMaxRevisionCounterFromQuery();
    api
        .getLocalChanges()
        .forEach(workspaceElement => syncCommandHelper.createStatusLocalRows(rows, workspaceElement, this.projectPath));
    api
        .getRemoteChanges()
        .forEach(workspaceElement => syncCommandHelper.createStatusRemoteRows(rows, workspaceElement, this.projectPath));
    this.logger.styledHeader(this.logger.color.blue(this.messages.getMessage('statusCommandHumanSuccess')));
    return rows;
};
/**
 * this indicated to index.js this command should produce tabular output.
 * @returns {*[]}
 */
SrcStatusCommand.prototype.getColumnData = function () {
    const commonMsgs = Messages.loadMessages('salesforce-alm', 'source');
    return syncCommandHelper.getColumnMetaInfo(commonMsgs);
};
module.exports = SrcStatusCommand;

//# sourceMappingURL=srcStatusCommand.js.map
