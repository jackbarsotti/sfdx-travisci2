"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configApi_1 = require("../core/configApi");
const path = require("path");
/**
 * Singleton class that represents the package directories defined in sfdx-project.json
 * as well as the "active" package directory during deployment/retrieval of source.
 * Provides the ability to parse source files for their package data, get the default
 * package, and other package directory utilities.
 */
class PackageInfoCache {
    constructor() {
        this.packageNames = [];
        this.packagePaths = [];
    }
    static create() {
        const instance = new PackageInfoCache();
        instance.init();
        return instance;
    }
    init() {
        this.packageConfigs = this.buildPackageList();
        this.defaultPackage = this.packageConfigs[0];
        this.packageConfigs.forEach(p => {
            this.packageNames.push(p.name);
            this.packagePaths.push(p.path);
            if (p.default) {
                this.defaultPackage = p;
            }
        });
        this.activePackage = Object.assign({}, this.defaultPackage);
    }
    static getInstance() {
        if (!PackageInfoCache.instance) {
            PackageInfoCache.instance = PackageInfoCache.create();
        }
        return PackageInfoCache.instance;
    }
    buildPackageList() {
        const config = new configApi_1.Config().getAppConfig();
        // There can be multiple packages that point to the same directory. SDD only want packages that point to
        // unique directories but this may not be true for packaging. If this class ever if used for packaging, be aware.
        const packageDirectoryPaths = [...new Set(config.packageDirectoryPaths)];
        return packageDirectoryPaths.map(pkgPath => {
            const pkgConfig = config.packageDirectories.find(p => pkgPath.endsWith(path.resolve(p.path)));
            const packagePath = pkgPath.endsWith(path.sep) ? pkgPath : `${pkgPath}${path.sep}`;
            return {
                path: packagePath,
                name: pkgConfig.path.startsWith(`.${path.sep}`) ? pkgConfig.path.replace(`.${path.sep}`, '') : pkgConfig.path,
                default: pkgConfig.default || false
            };
        });
    }
    getPackageNameFromSourcePath(sourcePath) {
        const match = this.packageConfigs.find(p => path.basename(sourcePath) === p.name || sourcePath.includes(p.path));
        return match ? match.name : null;
    }
    /**
     * Returns the absolute path of the package directory ending with the path separator.
     * E.g., /Users/jsmith/projects/ebikes-lwc/force-app/
     *
     * @param packageName Name of the package directory.  E.g., 'force-app'
     */
    getPackagePath(packageName) {
        const match = this.packageConfigs.find(p => p.name === packageName);
        return match ? match.path : null;
    }
    getActivePackage() {
        return this.activePackage;
    }
    setActivePackage(pkgName) {
        const activePackage = this.packageConfigs.find(p => p.name === pkgName);
        this.activePackage = activePackage ? Object.assign({}, activePackage) : null;
    }
    hasMultiplePackages() {
        return this.packageConfigs.length > 1;
    }
    getDefaultPackage() {
        return this.defaultPackage;
    }
}
exports.PackageInfoCache = PackageInfoCache;

//# sourceMappingURL=packageInfoCache.js.map
