import { SourceMember } from './SourceMember';
import { ConfigContents, ConfigFile, Logger } from '@salesforce/core';
import { Dictionary, Optional } from '@salesforce/ts-types';
declare type MemberRevision = {
    serverRevisionCounter: number;
    lastRetrievedFromServer: number;
    memberType: string;
    isNameObsolete: boolean;
};
declare type MaxJson = ConfigContents & {
    serverMaxRevisionCounter: number;
    sourceMembers: Dictionary<MemberRevision>;
};
export declare namespace MaxRevision {
    interface Options extends ConfigFile.Options {
        username: string;
    }
}
/**
 * This file is in charge of writing and reading to/from the .sfdx/orgs/<username>/maxRevision.json file for each scratch
 * org. This file is a json that keeps track of a SourceMember object and the serverMaxRevisionCounter, which is the
 * highest RevisionCounter field on the server. Each SourceMember object has 4 fields:
 *    serverRevisionCounter: the current RevisionCounter on the server for this object
 *    lastRetrievedFromServer: the RevisionCounter last retrieved from the server for this object
 *    memberType: the metadata name of the SourceMember
 *    isNameObsolete: wether or not this object has been deleted.
 *
 *    ex.
 ```
 {
    serverMaxRevisionCounter: 3,
    sourceMembers: {
      ApexClass__MyClass: {
        serverRevisionCounter: 3,
        lastRetrievedFromServer: 2,
        memberType: ApexClass,
        isNameObsolete: false
      },
      CustomObject__Student__c: {
        serverRevisionCounter: 1,
        lastRetrievedFromServer: 1,
        memberType: CustomObject,
        isNameObsolete: false
      }
    }
  }
  ```
 * In this example, `ApexClass__MyClass` has been changed in the org because the `serverRevisionCounter` is different
 * from the `lastRetrievedFromServer`. When a pull is performed, all of the pulled members will have their counters set
 * to the corresponding `RevisionCounter` from the `SourceMember` of the org.
 */
export declare class MaxRevision extends ConfigFile<MaxRevision.Options> {
    logger: Logger;
    private org;
    private readonly FIRST_REVISION_COUNTER_API_VERSION;
    private conn;
    private currentApiVersion;
    private static maxRevision;
    private isSourceTrackedOrg;
    /**
     * follows packageInfoCache's architecture, where getInstance is the entry method to the class
     * @param {MaxRevision.Options} options that contain the org's username
     * @returns {Promise<MaxRevision>} the maxRevision object for the given username
     */
    static getInstance(options: MaxRevision.Options): Promise<MaxRevision>;
    getFileName(): string;
    init(): Promise<void>;
    /**
     * Returns the contents of maxRevision.json as `MaxJson`
     */
    getContents(): MaxJson;
    /**
     * Returns whether maxRevision.json contains the specified key.
     *
     * @param key string of the form, <type>__<name> e.g.,`ApexClass__MyClass`
     */
    hasSourceMember(key: string): boolean;
    /**
     * Returns the `serverMaxRevisionCounter` property of maxRevision.json, which is the
     * last `RevisionCounter` retrieved from the org.
     */
    getServerMaxRevision(): number;
    /**
     * Returns all `SourceMembers` from maxRevision.json.
     */
    getSourceMembers(): Dictionary<MemberRevision>;
    /**
     * Returns the specified `SourceMember` from maxRevision.json or `undefined`.
     *
     * @param key string of the form, `<type>__<name>` e.g.,`ApexClass__MyClass`
     */
    getSourceMember(key: string): Optional<MemberRevision>;
    private setSourceMember;
    private upsertToJson;
    private upsertSourceMembers;
    private syncRevisionCounter;
    private convertRevisionToMember;
    /**
     * Returns the `SourceMembers` from maxRevision.json that have different `lastRetrievedFromServer`
     * and `serverRevisionCounter` numbers.
     */
    retrieveChangedElements(): Promise<SourceMember[]>;
    /**
     * reads and writes maxJson and handles serverMaxRevisionCounter
     * @param sourceMembers
     */
    writeSourceMembers(sourceMembers: SourceMember[]): Promise<void>;
    /**
     * Writes `SourceMembers` to maxRevision.json and sets the
     * `lastRetrievedFromServer` to the `serverRevisionCounter`.
     * This is called after a successful push or pull.
     */
    updateSourceTracking(sourceMembers?: SourceMember[]): Promise<void>;
    /**
     * Sets `serverMaxRevisionCounter` to the specific revision if greater than the current revision.
     *
     * @param rev new max revision number
     */
    setServerMaxRevision(rev: number): Promise<void>;
    setMaxRevisionCounterFromQuery(): Promise<void>;
    retrieveAndWriteNewRevisions(): Promise<void>;
    /**
     * Query all SourceMembers from the current serverMaxRevisionCounter and update the
     * maxRevision file with the query result, then return all SourceMembers from the file.
     */
    retrieveAllSourceMembers(): Promise<SourceMember[]>;
    /**
     * Polls the org for SourceMember objects matching the provided metadata member names,
     * from the provided RevisionCounter number, waiting for the pollTimeLimit amount of seconds.
     * NOTE: This can be removed when the Team Dependency (TD-0085369) for W-7737094 is delivered.
     * @param memberNames Array of metadata names to poll for
     * @param pollTimeLimit the number of seconds to poll for SourceMembers before timing out
     * @param fromRevision the RevisionCounter number from which to poll for SourceMembers
     */
    pollForSourceMembers(memberNames: string[], pollTimeLimit?: number): Promise<SourceMember[]>;
    querySourceMembersFrom(fromRevision: number): Promise<SourceMember[]>;
    queryAllSourceMembers(): Promise<SourceMember[]>;
    private query;
}
export {};
