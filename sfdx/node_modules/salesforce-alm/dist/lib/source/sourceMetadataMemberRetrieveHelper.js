"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
// Local
const MdapiPackage = require("./mdapiPackage");
const metadataTypeFactory_1 = require("./metadataTypeFactory");
const forceIgnore_1 = require("./forceIgnore");
const almError = require("../core/almError");
const logger = require("../core/logApi");
const Messages = require("../../lib/messages");
const MaxRevision_1 = require("./MaxRevision");
const packageInfoCache_1 = require("./packageInfoCache");
const nonDecomposedElementsIndex_1 = require("./nonDecomposedElementsIndex");
const messages = Messages();
/**
 * Helper that checks if the md item was set to obsolete in the org and returns true if so
 * @param mdApiItem
 * @returns {boolean} true - if the item is obsolete and should not be part of the md package
 * @private
 */
const _shouldExcludeFromMetadataPackage = function (mdApiItem, obsoleteNames, metadataRegistry, forceIgnore) {
    const mdFullName = mdApiItem.fullName;
    if (mdApiItem.isNameObsolete) {
        obsoleteNames.push({ fullName: mdFullName, type: mdApiItem.type });
        return true;
    }
    // check if the entity is a supported type
    if (!metadataRegistry.isSupported(mdApiItem.type) && !nonDecomposedElementsIndex_1.NonDecomposedElementsIndex.isSupported(mdApiItem.type)) {
        return true;
    }
    // if user wants to ignore a permissionset with fullname abc then we check if forceignore accepts abc.permissionset
    const metadataType = metadataTypeFactory_1.MetadataTypeFactory.getMetadataTypeFromMetadataName(mdApiItem.type, metadataRegistry);
    if (metadataType) {
        const filename = `${mdFullName}.${metadataType.getExt()}`;
        if (forceIgnore.denies(filename)) {
            return true;
        }
    }
    return false;
};
/**
 * Class used to derive changed org metadata.
 */
class SourceMetadataMemberRetrieveHelper {
    constructor(sourceWorkspaceAdapter) {
        this.swa = sourceWorkspaceAdapter;
        this.metadataRegistry = sourceWorkspaceAdapter.metadataRegistry;
        this.scratchOrg = sourceWorkspaceAdapter.metadataRegistry.org;
        this.force = this.scratchOrg.force;
        this.forceIgnore = new forceIgnore_1.ForceIgnore();
        this.logger = logger.child('SourceMetadataMemberRetrieveHelper');
        this.packageInfoCache = packageInfoCache_1.PackageInfoCache.getInstance();
    }
    shouldAddMember(mdApiItem, obsoleteNames) {
        return (mdApiItem !== null &&
            !_shouldExcludeFromMetadataPackage.call(this, mdApiItem, obsoleteNames, this.metadataRegistry, this.forceIgnore));
    }
    /**
     * gets all source metadata revisions from the server from <fromRevision>.
     * @returns
     * "Package": {
     *   "$": {
     *     "xmlns": "http://soap.sforce.com/2006/04/metadata"
     *   },
     *   "types": [
     *     {
     *       "name": "ApexClass",
     *       "members": [...]
     *     },
     *     ...
     *   ],
     *   "version": 38
     *}
     */
    async getRevisionsAsPackage(obsoleteNames) {
        const maxRevision = await MaxRevision_1.MaxRevision.getInstance({ username: this.scratchOrg.name });
        const changedElements = await maxRevision.retrieveChangedElements();
        const nonDecomposedElementsIndex = await nonDecomposedElementsIndex_1.NonDecomposedElementsIndex.getInstance({
            username: this.scratchOrg.name,
            metadataRegistry: this.metadataRegistry
        });
        const relatedElements = nonDecomposedElementsIndex.getRelatedNonDecomposedElements(changedElements);
        const allElements = changedElements.concat(relatedElements);
        const parsePromises = allElements.map(sourceMember => {
            const memberType = sourceMember.MemberType;
            const memberName = sourceMember.MemberName;
            if (!memberType || !memberName) {
                throw almError('fullNameIsRequired');
            }
            const metadataType = metadataTypeFactory_1.MetadataTypeFactory.getMetadataTypeFromMetadataName(memberType, this.metadataRegistry);
            if (metadataType) {
                return metadataType.parseSourceMemberForMetadataRetrieve(sourceMember.MemberName, sourceMember.MemberType, sourceMember.IsNameObsolete);
            }
            else {
                this.logger.log(messages.getMessage('metadataTypeNotSupported', [memberType, memberName]));
                return null;
            }
        });
        const promisedResults = await Promise.all(parsePromises);
        const packages = {};
        this.packageInfoCache.packageNames.forEach((pkg) => {
            packages[pkg] = new MdapiPackage();
        });
        promisedResults.forEach(mdApiItem => {
            if (!this.shouldAddMember(mdApiItem, obsoleteNames))
                return;
            const pkg = this.determinePackage(mdApiItem);
            packages[pkg].addMember(mdApiItem.fullName, mdApiItem.type);
        });
        return packages;
    }
    determinePackage(mdApiItem) {
        const sourceMemberMetadataType = metadataTypeFactory_1.MetadataTypeFactory.getMetadataTypeFromMetadataName(mdApiItem.type, this.metadataRegistry);
        let fileLocation = this.swa.sourceLocations.getFilePath(sourceMemberMetadataType.getAggregateMetadataName(), mdApiItem.fullName);
        if (!fileLocation && sourceMemberMetadataType.hasParent()) {
            // Try to get a fileLocation using the parent fullName. We do this to match a new remote
            // field with its parent custom object location rather than assuming the default package.
            fileLocation = this.swa.sourceLocations.getFilePath(sourceMemberMetadataType.getAggregateMetadataName(), sourceMemberMetadataType.getAggregateFullNameFromSourceMemberName(mdApiItem.fullName));
        }
        const defaultPackage = this.packageInfoCache.defaultPackage.name;
        if (fileLocation) {
            return this.packageInfoCache.getPackageNameFromSourcePath(fileLocation) || defaultPackage;
        }
        else {
            return defaultPackage;
        }
    }
}
module.exports = SourceMetadataMemberRetrieveHelper;

//# sourceMappingURL=sourceMetadataMemberRetrieveHelper.js.map
