/**
 * Helper class for dealing with the settings that are defined in a scratch definition file.  This class knows how to extract the
 * settings from the definition, how to expand them into a MD directory and how to generate a package.xml.
 */
declare class SettingsGenerator {
    private settingData;
    private objectSettingsData;
    private currentApiVersion;
    /** extract the settings from the scratch def file, if they are present. */
    extract(scratchDef: any, apiVersion?: any): Promise<void>;
    /** True if we are currently tracking setting or object setting data. */
    hasSettings(): boolean;
    /** Check to see if the scratchDef contains orgPreferenceSettings
     *  orgPreferenceSettings are no longer supported after api version 46.0
     */
    orgPreferenceSettingsMigrationRequired(scratchDef: any): boolean;
    /** This will copy all of the settings in the scratchOrgInfo orgPreferences mapping into the settings structure.
     *  It will also spit out a warning about the pending deprecation og the orgPreferences structure.
     *  This returns a failure message in the promise upon critical error for api versions after 46.0.
     *  For api versions less than 47.0 it will return a warning.
     */
    migrate(scratchDef: any, apiVersion: any): Promise<void>;
    /** This method converts all orgPreferenceSettings preferences into their respective
     *  org settings objects.
     */
    extractAndMigrateSettings(scratchDef: any): Promise<void>;
    /** Create temporary deploy directory used to upload the scratch org shape.
     * This will create the dir, generate package.xml and all of the .setting files.
     */
    createDeployDir(apiVersion: any): Promise<string>;
    private writePackageFile;
    private writeObjectSettingsIfNeeded;
    private writeSettingsIfNeeded;
    private getTypeReferences;
    _createSettingsFileContent(name: any, json: any): any;
    _createObjectFileContent(name: string, json: Object, allRecTypes: String[], allBps: String[]): string;
    cap(s: string): string;
}
export = SettingsGenerator;
