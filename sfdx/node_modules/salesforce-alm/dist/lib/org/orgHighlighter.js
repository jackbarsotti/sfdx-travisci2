"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const _ = require("lodash");
const chalk_1 = require("chalk");
/**
 * Class for decorating org status and connected status in the org:list and display commands.
 */
class OrgDecorator {
    constructor(colorEnabled = true, chalkOverride) {
        this.colorEnabled = colorEnabled;
        this.chalk = chalkOverride || chalk_1.default;
    }
    /**
     * helper to decorate the org status
     * @param {object} val - org metadata
     */
    decorateStatus(val) {
        if (this.colorEnabled) {
            this.decorateAttribute(val, 'status', 'Active');
        }
    }
    /**
     * helper to decorate the org connectedStatus
     * @param {object} val - org metadata
     */
    decorateConnectedStatus(val) {
        if (val.connectedStatus === 'Unknown') {
            return val;
        }
        if (this.colorEnabled) {
            return this.decorateAttribute(val, 'connectedStatus', 'Connected');
        }
    }
    /**
     * Helper to decorate attributes
     * @param {object} val - object containing the value to decorate
     * @param {string} attribute - the name of the attribute to decorate
     * @param {string} greenStatus - the name of state that should report green.
     * @private
     */
    decorateAttribute(val, attribute, greenStatus) {
        if (val && !_.isNil(_.get(val, attribute))) {
            switch (_.get(val, attribute)) {
                case greenStatus:
                    _.set(val, attribute, this.chalk.green(_.get(val, attribute)));
                    break;
                default:
                    _.set(val, attribute, this.chalk.red(_.get(val, attribute)));
                    break;
            }
        }
        return val;
    }
}
module.exports = OrgDecorator;

//# sourceMappingURL=orgHighlighter.js.map
