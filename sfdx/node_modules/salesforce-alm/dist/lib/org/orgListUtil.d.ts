import { Org, AuthInfo, AuthFields } from '@salesforce/core';
import { Record } from 'jsforce';
export interface ExtendedAuthFields extends AuthFields {
    lastUsed: Date;
    orgName?: string;
    edition?: string;
    signupUsername?: string;
    devHubOrgId?: string;
    isExpired?: boolean;
    connectedStatus?: string;
    status?: string;
    isDefaultUsername?: boolean;
    isDefaultDevHubUsername?: boolean;
    createdBy: string;
    createdDate: string;
    attributes: object;
}
declare type OrgGroups = {
    nonScratchOrgs: ExtendedAuthFields[];
    activeScratchOrgs: ExtendedAuthFields[];
    expiredScratchOrgs: ExtendedAuthFields[];
    queryExpirationDate: ExtendedAuthFields[];
    totalScratchOrgs: ExtendedAuthFields[];
};
declare type ScratchOrgInfo = {
    Id: string;
    SignupUsername: string;
    ExpirationDate: string;
};
declare type ExtendedScratchOrgInfo = ScratchOrgInfo & {
    devHubOrgId: string;
    connectedStatus: string;
};
export declare class OrgListUtil {
    static logger: any;
    static _accum: OrgGroups;
    static retrieveLogger(): Promise<any>;
    /**
     * This method takes all locally configured orgs and organizes them into the following buckets:
     * { activeScratchOrgs: [{}], nonScratchOrgs: [{}], scratchOrgs: [{}] }
     * the scratchOrgInfo query.
     * @param {string[]|null} excludeProperties - properties to exclude from the configs defaults. ['refreshToken', 'clientSecret']. Specify null to include all properties.
     * @param {string[]|null} userFilenames- an array of strings that are validated against the server.
     */
    static readLocallyValidatedMetaConfigsGroupedByOrgType(userFilenames: string[], flags: any, excludeProperties?: string[]): Promise<OrgGroups>;
    /**
     * Used to retrieve authInfo of the auth files
     * @param fileNames All the filenames in the global hidden folder
     */
    static readAuthFiles(fileNames: string[]): Promise<AuthInfo[]>;
    /**
     * retrieves the connection info of an nonscratch org
     * @returns {BBPromise.<array>}
     */
    static determineDevHubConnStatus(fields: ExtendedAuthFields): Promise<void>;
    /**
     * Helper to group orgs by {activeScratchOrgs, scratchOrg, nonScratchOrgs}
     * @param {object} contents -The authinfo retrieved from the auth files
     * @param {string[]} excludeProperties - properties to exclude from the grouped configs ex. ['refreshToken', 'clientSecret']
     * @private
     */
    static _groupOrgs(authInfos: AuthInfo[], _accum: OrgGroups, excludeProperties?: string[]): Promise<OrgGroups>;
    static retrieveScratchOrgExpDate(devHub: Org, orgId: string, authInfo: AuthInfo): Promise<void>;
    static writeFieldsToAuthFile(scratchOrgInfo: ScratchOrgInfo, authInfo: AuthInfo, excludeProperties?: string[]): Promise<void>;
    /**
     * Helper utility to remove sensitive information from a scratch org auth config. By default refreshTokens and client secrets are removed.
     * @param {*} config - scratch org auth object.
     * @param {string[]} properties - properties to exclude ex ['refreshToken', 'clientSecret']
     * @returns the config less the sensitive information.
     */
    static _removeRestrictedInfoFromConfig(config: AuthFields, properties?: string[]): Partial<AuthFields>;
    /**
     * Helper to identify active orgs based on the expiration data.
     * @param expirationDate
     */
    static _identifyActiveOrgs(expirationDate: any): boolean;
    /**Identify the default orgs */
    private static identifyDefaultOrgs;
    static retrieveScratchOrgInfoFromDevHub(username: string, orgIdsToQuery: string[]): Promise<Record<ExtendedScratchOrgInfo>[]>;
    static reduceScratchOrgInfo(updatedContents: Record<ExtendedScratchOrgInfo>[], orgs: ExtendedAuthFields[]): Promise<ExtendedAuthFields[]>;
}
export {};
