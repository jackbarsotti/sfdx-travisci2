"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../force-cli/force-cli-display");
const Config = require("../force-cli/force-cli-config");
const Messages = require("../force-cli/force-cli-messages");
var Type;
(function (Type) {
    Type[Type["ALL"] = 0] = "ALL";
    Type[Type["STANDARD"] = 1] = "STANDARD";
    Type[Type["CUSTOM"] = 2] = "CUSTOM";
})(Type = exports.Type || (exports.Type = {}));
class SchemaSObjectListCommand {
    validate(context) { }
    async execute(context) {
        context.flags.sobjecttypecategory = Type[context.flags.sobjecttypecategory.toUpperCase()];
        if (context.flags.sobjecttypecategory === undefined) {
            throw new Error(Messages.get('SchemaSObjectListTypeInvalidValue'));
        }
        return await exports.describeObjectsOfType(context);
    }
}
exports.SchemaSObjectListCommand = SchemaSObjectListCommand;
exports.describeObjectsOfType = async function (context) {
    const typeDescriptions = [];
    const conn = await Config.getActiveConnection(context);
    const allDescriptions = await conn.describeGlobal();
    let havePrinted = false;
    allDescriptions['sobjects'].forEach(function (sobject) {
        const isCustom = sobject.custom === true;
        const doPrint = context.flags.sobjecttypecategory === Type.ALL ||
            (context.flags.sobjecttypecategory === Type.CUSTOM && isCustom) ||
            (context.flags.sobjecttypecategory === Type.STANDARD && !isCustom);
        if (doPrint) {
            havePrinted = true;
            Display.info(sobject.name);
            typeDescriptions.push(sobject.name);
        }
    });
    if (!havePrinted) {
        Display.info(Messages.get('SchemaSObjectListObjectOfTypeNotFound', Type[context.flags.sobjecttypecategory]));
    }
    return typeDescriptions;
};

//# sourceMappingURL=schemaSObjectListCommand.js.map
