"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const antlr4_1 = require("antlr4");
const SOQLLexer_1 = require("../../../../gen/SOQLLexer");
const SOQLParser_1 = require("../../../../gen/SOQLParser");
function parseSOQL(soql) {
    const chars = new antlr4_1.InputStream(soql);
    const lexer = new SOQLLexer_1.SOQLLexer(chars);
    const tokens = new antlr4_1.CommonTokenStream(lexer);
    const parser = new SOQLParser_1.SOQLParser(tokens);
    parser['buildParseTrees'] = true;
    return parser.soql_query();
}
class Field {
    constructor(name) {
        this.name = name;
    }
}
exports.Field = Field;
class SubqueryField extends Field {
    constructor() {
        super(...arguments);
        this.fields = [];
    }
}
exports.SubqueryField = SubqueryField;
class FunctionField extends Field {
}
exports.FunctionField = FunctionField;
function getFields(soql, logger) {
    const soqlTree = parseSOQL(soql);
    const selectClause = soqlTree.select_clause();
    const fieldSpecs = selectClause.select_spec();
    const fields = [];
    fieldSpecs.forEach(spec => {
        try {
            if (spec.field_spec()) {
                fields.push(new Field(spec.field_spec().getText()));
            }
            else if (spec.soql_subquery()) {
                const field = new SubqueryField(spec
                    .soql_subquery()
                    .from_clause()
                    .object_spec()[0]
                    .getText());
                const innerSpecs = spec
                    .soql_subquery()
                    .subquery_select_clause()
                    .subquery_select_spec();
                innerSpecs.forEach(innerField => {
                    field.fields.push(new Field(innerField.field_spec().getText()));
                });
                fields.push(field);
            }
            else if (spec.function_call_spec()) {
                const field = new FunctionField(spec
                    .function_call_spec()
                    .function_call()
                    .getText());
                if (spec.function_call_spec().alias()) {
                    field.alias = spec
                        .function_call_spec()
                        .alias()
                        .getText();
                }
                fields.push(field);
            }
        }
        catch (e) {
            // Instead of blowing up and not showing any results, just log the error.
            logger && logger.warn(`Error parsing field spec for query ${soql} - ${e.message}`);
        }
    });
    return fields;
}
exports.getFields = getFields;

//# sourceMappingURL=index.js.map
