import { Dictionary, JsonMap } from '@salesforce/ts-types';
interface DataImportComponents {
    orgConfig: JsonMap;
    saveRefs?: boolean;
    resolveRefs?: boolean;
    refMap: Map<string, string>;
    filepath: string;
    contentType: string;
}
/**
 * Command that provides data import capabilities.
 */
declare class DataImportApi {
    [property: string]: any;
    constructor(org: any);
    /**
     * Validates the flags (options) set on the command.  Also validates the plan
     * if passed as a flag.
     *
     * @param flags - The flags on the context passed to the command.
     * @returns BBPromise.<Object>
     */
    validate(options?: Dictionary<any>): any;
    /**
     * Inserts given SObject Tree content into given target Org.
     *
     * Validation and options fix-up done in execute() instead
     * of validate() to ensure that all execution paths are
     * properly validated.
     *
     * @param options
     */
    execute(options?: Dictionary<any>): any;
    /**
     * Creates an array of display rows as defined by the metadata returned from this.getColumnData().
     *
     * @returns {BBPromise.<Array>}
     */
    createDisplayRows(): any;
    /**
     * Used by index.js to create heroku table formatted output of successful import results.
     *
     * @returns {[{}...]}
     */
    getColumnData(): {
        key: string;
        label: string;
    }[];
    /**
     * Converts failed import results to human-readable output.
     */
    getHumanErrorMessage(): string;
    _logErrors(errors: any): void;
    /**
     * Create a hash of sobject { ReferenceId: Type } assigned to this.sobjectTypes.
     * Used to display the sobject type in the results.
     *
     * @param content  The content string defined by the file(s).
     * @param isJson
     * @private
     */
    _createSObjectTypeMap(content: any, isJson: any): void;
    _getSObjectTreeFileMeta(filepath: any, contentType?: any): Dictionary<any>;
    _parseSObjectTreeFile({ filepath, isJson, refRegex, resolveRefs, refMap }: {
        filepath: any;
        isJson: any;
        refRegex: any;
        resolveRefs: any;
        refMap: any;
    }): any;
    _sendSObjectTreeRequest({ contentStr, sobject, orgConfig, headers }: {
        contentStr: any;
        sobject: any;
        orgConfig: any;
        headers: any;
    }): any;
    _parseSObjectTreeResponse({ response, filepath, isJson, saveRefs, refMap }: {
        response: any;
        filepath: any;
        isJson: any;
        saveRefs: any;
        refMap: any;
    }): any;
    _importSObjectTreeFile(components: DataImportComponents): any;
}
export = DataImportApi;
