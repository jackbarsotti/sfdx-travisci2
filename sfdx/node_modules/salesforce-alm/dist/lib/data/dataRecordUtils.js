"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Error = require("../force-cli/force-cli-error");
const Messages = require("../force-cli/force-cli-messages");
const TextUtil = require("../force-cli/force-cli-textutils");
exports.retrieveId = async function (connection, context) {
    let sobjectid;
    if (context.flags.where) {
        sobjectid = await exports.queryByWhere(connection, context.flags.sobjecttype, context.flags.where, context.flags.usetoolingapi);
    }
    else {
        sobjectid = context.flags.sobjectid;
    }
    return sobjectid;
};
exports.queryByWhere = async function queryByWhere(connection, sobjectType, keyValueSequence, useToolingApi) {
    try {
        const keyValuePairs = TextUtil.parseKeyValueSequence(keyValueSequence);
        const queryObject = TextUtil.transformKeyValueSequence(keyValuePairs);
        const records = useToolingApi
            ? await connection.tooling.sobject(sobjectType).find(queryObject, 'id')
            : await connection.sobject(sobjectType).find(queryObject, 'id');
        if (!records || records.length === 0) {
            return Error.exitWithMessage(Messages.get('DataRecordGetNoRecord'));
        }
        if (records.length !== 1) {
            Error.exitWithMessage(Messages.get('DataRecordGetMultipleRecords', keyValueSequence, sobjectType, records.length));
        }
        return records[0]['Id'];
    }
    catch (err) {
        return Error.exitWithMessage(err.message);
    }
};
function validateIdXorWhereFlags(context) {
    if (!(context.flags.sobjectid || context.flags.where)) {
        Error.exitWithMessage(Messages.get('DataRecordNeitherSobjectidNorWhereError'));
    }
    if (context.flags.sobjectid && context.flags.where) {
        Error.exitWithMessage(Messages.get('DataRecordBothSobjectidAndWhereError'));
    }
}
exports.validateIdXorWhereFlags = validateIdXorWhereFlags;

//# sourceMappingURL=dataRecordUtils.js.map
