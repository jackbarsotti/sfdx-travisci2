/// <reference types="node" />
/// <reference types="csv-parse/csv-parse" />
import { Connection } from 'jsforce';
import { Batch } from 'jsforce';
import fs = require('fs');
import { Job } from 'jsforce';
export declare class DataBulkUpsertCommand {
    execute(context: any): Promise<any>;
}
export declare let retrieveCvsStream: (context: any) => fs.ReadStream;
/**
 * pick one of the possible many external ids
 * exposed for unit testing
 * @param conn {Connection}
 * @param objName {string}
 * @returns {string} - external id field name
 */
export declare let findAnExternalId: (conn: Connection, objName: string) => Promise<string>;
/**
 * registers the listener in charge of distributing all csv records into batches
 * exposed for unit testing
 * @param readStream - the read stream
 * @returns {Object[][]}
 */
export declare let splitIntoBatches: (readStream: fs.ReadStream) => Promise<any>;
/**
 * create and execute batches based on the record arrays; wait for completion response if -w flag is set with > 0 minutes
 * exposed for unit testing
 * @param conn {Connection}
 * @param job {Job}
 * @param batches {Object[][]}
 * @param sobjectType {string}
 * @param wait {number}
 */
export declare let createAndExecuteBatches: (conn: Connection, job: Job, batches: Object[][], sobjectType: string, wait?: number) => Promise<any[]>;
/**
 * register completion event listeners on the batch
 * exposed for unit testing
 * @param conn
 * @param newBatch
 * @param batchesCompleted
 * @param overallInfo
 * @param batchNum
 * @param totalNumBatches
 */
export declare let waitForCompletion: (conn: Connection, newBatch: Batch, batchesCompleted: number, overallInfo: boolean, batchNum: number, totalNumBatches: number, waitMins: number) => Promise<any>;
