"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../force-cli/force-cli-display");
const Config = require("../force-cli/force-cli-config");
const Messages = require("../force-cli/force-cli-messages");
const TextUtils = require("../force-cli/force-cli-textutils");
const DataRecordUtils = require("./dataRecordUtils");
const ID_FIELD = 'Id';
class DataRecordUpdateCommand {
    async execute(context) {
        DataRecordUtils.validateIdXorWhereFlags(context);
        const conn = await Config.getActiveConnection(context);
        const updateObject = await exports.createUpdateObject(conn, context);
        // TODO: update() returns RecordResult | RecordResult[] so this may be a bug in the impl unless we know
        //       we are assured of only updating 1 record.
        let result = context.flags.usetoolingapi
            ? await conn.tooling.update(context.flags.sobjecttype, updateObject)
            : await conn.sobject(context.flags.sobjecttype).update(updateObject);
        if (result.success) {
            Display.success(Messages.get('DataRecordUpdateSuccess', updateObject[ID_FIELD]));
        }
        else {
            let errors = '';
            if (result.errors) {
                errors = '\nErrors:\n';
                result.errors.forEach(function (err) {
                    errors += '  ' + err + '\n';
                });
            }
            Display.failure(Messages.get('DataRecordUpdateFailure', errors));
        }
        return result;
    }
}
exports.DataRecordUpdateCommand = DataRecordUpdateCommand;
exports.createUpdateObject = async function (connection, context) {
    const sobjectid = await DataRecordUtils.retrieveId(connection, context);
    const keyValuePairs = TextUtils.parseKeyValueSequence(context.flags.values);
    const updateObject = TextUtils.transformKeyValueSequence(keyValuePairs);
    updateObject[ID_FIELD] = sobjectid;
    return updateObject;
};

//# sourceMappingURL=dataRecordUpdateCommand.js.map
