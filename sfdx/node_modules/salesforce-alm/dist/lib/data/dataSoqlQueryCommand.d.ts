import { Reporter } from '../../lib/test/reporter';
import { Field } from './soqlParser';
import { Connection } from 'jsforce';
declare class QueryReporter extends Reporter {
    protected conn: Connection;
    protected query: string;
    columns: Field[];
    constructor(conn: Connection, query: string, logger?: any);
    getBaseUrl(): string;
    retrieveColumns(): Promise<Field[]>;
}
export declare class HumanReporter extends QueryReporter {
    parseFields(): {
        attributeNames: any[];
        children: any[];
        aggregates: any[];
    };
    massageRows(queryResults: any, children: any, aggregates: any): any;
    onFinished(queryResults: any): Promise<void>;
    display(attributeNames: any, queryResults: any, totalCount: any): void;
    getFormat(): string;
}
export declare class CsvReporter extends QueryReporter {
    /**
     * Escape a value to be placed in a CSV row. We follow rfc 4180
     * https://tools.ietf.org/html/rfc4180#section-2 and will not surround the
     * value in quotes if it doesn't contain the separator, double quote, or EOL.
     * @param value The escaped value
     */
    escape(value: any): any;
    onFinished(queryResults: any): Promise<void>;
    getFormat(): string;
}
export declare class JsonReporter extends QueryReporter {
    onFinished(queryResults: any): Promise<void>;
    log(msg: any): void;
    logTable(header: any, data: any, columns: any): void;
    getFormat(): string;
}
/**
 * A list of the accepted reporter types
 */
export declare const FormatTypes: {
    human: typeof HumanReporter;
    csv: typeof CsvReporter;
    json: typeof JsonReporter;
};
export declare class DataSoqlQueryCommand {
    validate(context: any): any;
    execute(context: any): Promise<any>;
}
/**
 * get attribute names from the query using the antlr parser
 * @param {string} query - the query
 * @returns {string[]}
 */
export declare let getAllAttributesNames: (query: string, logger?: any) => Field[];
export {};
