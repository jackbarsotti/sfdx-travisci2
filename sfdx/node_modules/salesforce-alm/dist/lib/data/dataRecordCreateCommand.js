"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../force-cli/force-cli-display");
const Error = require("../force-cli/force-cli-error");
const Config = require("../force-cli/force-cli-config");
const Messages = require("../force-cli/force-cli-messages");
const TextUtils = require("../force-cli/force-cli-textutils");
class DataRecordCreateCommand {
    async execute(context) {
        if (context.flags.sobjecttype && context.flags.values) {
            return await exports.createRecord(context);
        }
        else {
            Error.exitDisplayHelp(context.command);
        }
    }
}
exports.DataRecordCreateCommand = DataRecordCreateCommand;
exports.createRecord = async function (context) {
    const conn = await Config.getActiveConnection(context);
    const sobject = context.flags.sobjecttype;
    const insertObject = await exports.createInsertObject(context);
    // TODO: create() returns RecordResult | RecordResult[] so this may be a bug in the impl unless we know
    //        we are assured of only creating 1 record.
    const result = context.flags.usetoolingapi
        ? await conn.tooling.create(sobject, insertObject)
        : await conn.sobject(sobject).create(insertObject);
    if (result.success) {
        let id = 'unknown id';
        if (result.id) {
            id = result.id;
        }
        Display.success(Messages.get('DataRecordCreateSuccess', id));
    }
    else {
        let errors = '';
        if (result.errors) {
            errors = '\nErrors:\n';
            result.errors.forEach(function (err) {
                errors += '  ' + err + '\n';
            });
        }
        Display.failure(Messages.get('DataRecordCreateFailure', errors));
    }
    return result;
};
exports.createInsertObject = async function (context) {
    const keyValuePairs = TextUtils.parseKeyValueSequence(context.flags.values);
    return TextUtils.transformKeyValueSequence(keyValuePairs);
};

//# sourceMappingURL=dataRecordCreateCommand.js.map
