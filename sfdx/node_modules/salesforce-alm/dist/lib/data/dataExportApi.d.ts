import { Dictionary } from '@salesforce/ts-types';
/**
 * Command that provides data export capabilities.
 */
declare class DataExportApi {
    [property: string]: any;
    constructor(org: any);
    /**
     * Validates the flags (options) set on the command.  Ensures the -q (--query) flag
     * is specified, which can be either a soql query or a file containing a soql query.
     *
     * @param options - The flags on the context passed to the command.
     * @returns BBPromise.<Object>
     */
    validate(options?: Dictionary<any>): any;
    /**
     * Invokes given SOQL query against given target Org.  Results
     * are converted into SObject Tree format.
     *
     * @param options
     */
    execute(options?: Dictionary<any>): any;
    _setupOutputDirectory(options: any): any;
    _main(options: any, recordList: any): any;
    _recordObjectTypes(recordList: any): any;
    _processRecordList(options: any, recordList: any, parentRef?: any): any;
    _processRecords(options: any, parentRef: any, record: any, sobjectTree: any): any;
    _incrementTypeRefIndex(type: any): string;
    _processRecordAttributes(options: any, record: any, treeRecord: any, objRefId: any): any;
    _processRecordAttribute(options: any, record: any, key: any, treeRecord: any, objRefId: any): any;
    _loadMetadata(objectName: any): any;
    _isQueryResult(metadata: any, fieldName: any): any;
    _isSpecificTypeWithMetadata(metadata: any, fieldName: any, fieldType: any): boolean;
    _getRelationshipFieldName(metadata: any, parentName: any): any;
    _isRelationship(objectName: any, fieldName: any): boolean;
    _isRelationshipWithMetadata(metadata: any, fieldName: any): boolean;
    _getRelatedTo(objectName: any, fieldName: any): any;
    _getRelatedToWithMetadata(metadata: any, fieldName: any): any;
    _saveRecordRef(obj: any, refId: any): void;
    /**
     * Walk the final data set and split out into files.  The main queried
     * object is the parent, and has a different saveRefs and resolveRefs
     * values.  All the references have been created at this point.
     */
    _generateDataPlan(options: any, sobjectTree: any): any;
    _writeObjectTypeDataFile(options: any, type: any, saveRefs: any, resolveRefs: any, fileName: any, sObject: any): any;
    /**
     * This method is used as a second pass to establish references that couldn't be determined
     * in the initial pass done by processRecordList. It looks for relationship fields that
     * contain an id.
     */
    _finalApplyRefs(sobjectTree: any): any;
    _countRecords(obj: any): number;
    _writeFile(options: any, fileName: any, jsonObject: any): any;
}
export = DataExportApi;
