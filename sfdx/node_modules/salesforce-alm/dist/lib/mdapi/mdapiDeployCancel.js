"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const configApi_1 = require("../core/configApi");
const DeployReport = require("../mdapi/mdapiDeployReportApi");
/**
 * API that wraps Metadata API to cancel a deployment from a given org.
 *
 * @param force
 * @constructor
 */
class MdapiDeployCancel {
    constructor(org) {
        this._reporter = new DeployReport(org);
    }
    // Get a @salesforce/core Connection, which extends jsforce.Connection.
    async _getCoreConnection(username, authConfig) {
        const conn = await core_1.Connection.create({
            authInfo: await core_1.AuthInfo.create({ username, oauth2Options: authConfig })
        });
        conn.setApiVersion(new configApi_1.Config().getApiVersion());
        return conn;
    }
    _checkCancelStatus(result, options) {
        options.deprecatedStatusRequest = !!options.jobid;
        options.jobid = options.jobid || result.id;
        options.result = result;
        return this._reporter.report(options);
    }
    async cancel(orgApi, options) {
        const username = orgApi.getName();
        const connection = await this._getCoreConnection(username, username ? null : orgApi.authConfig);
        try {
            // TODO: A method should be added to jsforce for cancelDeploy()
            const result = await connection.metadata['_invoke']('cancelDeploy', {
                id: options.jobid
            });
            return await this._checkCancelStatus(result, options);
        }
        catch (err) {
            throw core_1.SfdxError.create('salesforce-alm', 'mdapi_cancel', 'CancelFailed', [err.message]);
        }
    }
}
exports.MdapiDeployCancel = MdapiDeployCancel;

//# sourceMappingURL=mdapiDeployCancel.js.map
