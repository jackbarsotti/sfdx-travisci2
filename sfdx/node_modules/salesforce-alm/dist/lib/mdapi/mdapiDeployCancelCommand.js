"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const mdapiDeployCancel_1 = require("../mdapi/mdapiDeployCancel");
const sourceUtil_1 = require("../source/sourceUtil");
const Stash = require("../core/stash");
core_1.Messages.importMessagesDirectory(__dirname);
class MdapiCancelCommand {
    constructor(stashKey = Stash.Commands.MDAPI_DEPLOY) {
        this.stashKey = stashKey;
    }
    /**
     * Executes the mdapi deploy cancel command
     * @param context - the cli context
     * @returns {Promise}
     */
    async execute(context) {
        return await new mdapiDeployCancel_1.MdapiDeployCancel(this.org).cancel(this.org, context);
    }
    /**
     * Validates the mdapi deploy cancel command parameters
     * @param context - the cli context
     * @returns {Promise}
     */
    async validate(context) {
        const options = context.flags;
        this.org = context.org;
        if (!options.jobid) {
            let stashedValues = await Stash.list(this.stashKey);
            options.jobid = stashedValues.jobid;
        }
        if (!options.jobid) {
            throw core_1.SfdxError.create('salesforce-alm', 'mdapi_cancel', 'MissingRequiredParameter');
        }
        // Validate the wait param if set and convert to an integer.
        sourceUtil_1.parseWaitParam(options);
        return Promise.resolve(options);
    }
}
exports.MdapiCancelCommand = MdapiCancelCommand;

//# sourceMappingURL=mdapiDeployCancelCommand.js.map
