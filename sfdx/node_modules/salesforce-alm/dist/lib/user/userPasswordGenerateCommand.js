"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const _ = require("lodash");
const os = require("os");
const messages = require("../messages");
const almError = require("../core/almError");
const Alias = require("../core/alias");
const command_1 = require("../core/command");
const user_1 = require("./user");
const logApi = require("../core/logApi");
const { getMessage } = messages();
class UserPasswordGenerateCommand extends command_1.default {
    constructor() {
        super('user:password:generate');
    }
    async validate(context) {
        // verify we have an org.  can't do anything without an org
        if (!context.org) {
            throw almError({ keyName: 'noOrgProvided', bundle: 'generatePassword' });
        }
        // verify that the org is a scratch org
        return context.org
            .checkScratchOrg(context.flags.defaultdevhubusername)
            .then(() => {
            this.org = context.org;
        })
            .then(() => super.validate(context));
    }
    async execute(context) {
        this.usernames = _.map((_.get(context, 'flags.onbehalfof') || this.org.getName()).split(','), _.trim);
        // Convert any aliases to usernames
        const aliases = await Alias.list();
        this.usernames = this.usernames.map(username => aliases[username] || username);
        let users = await user_1.default.fetchUsers(this.org, this.usernames);
        // Generate and set passwords for all users
        try {
            users = await Promise.all(users.map(user => user.assignPassword()));
        }
        catch (err) {
            if (_.includes(err.message, 'Cannot set password for self')) {
                err['action'] = getMessage('noSelfSetAction', [], 'generatePassword');
            }
            throw err;
        }
        // Build the password data object/array to return
        this.passwordData =
            users.length === 1
                ? { password: users[0].password }
                : users.map(user => ({
                    username: user.getField('username'),
                    password: user.password
                }));
        return Promise.resolve(this.passwordData);
    }
    getHumanSuccessMessage(pwdData) {
        const uiLogger = logApi.child(this.loggerName);
        if (pwdData.password) {
            const successMsg = getMessage('success', [pwdData.password, this.usernames[0]], 'generatePassword');
            const viewMsg = getMessage('viewWithCommand', [this.usernames[0]], 'generatePassword');
            uiLogger.log(`${successMsg}${os.EOL}${viewMsg}`);
        }
        else {
            uiLogger.log(getMessage('successMultiple', undefined, 'generatePassword'));
            const columnData = {
                columns: [
                    { key: 'username', label: 'USERNAME' },
                    { key: 'password', label: 'PASSWORD' }
                ]
            };
            uiLogger.table(pwdData, columnData);
        }
    }
}
exports.UserPasswordGenerateCommand = UserPasswordGenerateCommand;
exports.default = UserPasswordGenerateCommand;

//# sourceMappingURL=userPasswordGenerateCommand.js.map
