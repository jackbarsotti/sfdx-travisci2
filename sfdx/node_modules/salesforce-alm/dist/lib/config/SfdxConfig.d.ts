import ConfigFile = require('./ConfigFile');
declare class SfdxConfig extends ConfigFile {
    static OrgDefaults: {
        DEVHUB: string;
        USERNAME: string;
        list(): string[];
    };
    [property: string]: any;
    constructor(isGlobal?: any);
    initCrypto(): Promise<void>;
    clearCrypto(): void;
    cryptProperties(encrypt: any): Promise<void>;
    read(): Promise<any>;
    write(): Promise<void>;
    /**
     * Sync version of read.
     * @deprecated This should only be used by legacy config.
     */
    readSync(): any;
    getPropertyConfig(propertyName: any): {
        key: string;
        input: {
            validator: (value: any) => boolean;
            failedMessage: any;
        };
        hidden?: undefined;
        encrypted?: undefined;
    } | {
        key: string;
        hidden: boolean;
        input: {
            validator: (value: any) => boolean;
            failedMessage: any;
        };
        encrypted?: undefined;
    } | {
        key: string;
        input?: undefined;
        hidden?: undefined;
        encrypted?: undefined;
    } | {
        key: string;
        encrypted: boolean;
        input?: undefined;
        hidden?: undefined;
    };
    setPropertyValue(propertyName: any, value?: any): void;
    static getAllowedProperties(): ({
        key: string;
        input: {
            validator: (value: any) => boolean;
            failedMessage: any;
        };
        hidden?: undefined;
        encrypted?: undefined;
    } | {
        key: string;
        hidden: boolean;
        input: {
            validator: (value: any) => boolean;
            failedMessage: any;
        };
        encrypted?: undefined;
    } | {
        key: string;
        input?: undefined;
        hidden?: undefined;
        encrypted?: undefined;
    } | {
        key: string;
        encrypted: boolean;
        input?: undefined;
        hidden?: undefined;
    })[];
    static set(isGlobal: any, property: any, value?: any): Promise<void>;
    static clear(): Promise<void>;
}
export = SfdxConfig;
