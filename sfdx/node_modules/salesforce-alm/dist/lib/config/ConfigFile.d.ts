/**
 * Represents a json config file that the toolbelt uses to manage settings and
 * state. Global config files are stores in the home directory hidden state
 * folder (.sfdx) and local config files are stored in the project path, either
 * in the hidden state folder or wherever specifed.
 *
 */
declare class ConfigFile {
    [property: string]: any;
    /**
     * Constructor that sets the path and name. The path is generaterated from
     * all the passed in parameters.
     *
     * @constructor
     * @param {string} fileName The name of the config file.
     * @param {boolean} isGlobal If true, file root is set to the home directory.
     * If false or not a boolean, file root is set to the project directory.
     * @param {boolean} isState If true, file is stored in the hidden state folder
     * witin the file root. This will automatically be set to true if isGlobal is true.
     * @param {string} filePath The path of the config file appended to the file
     * root. i.e. a relatvie path from the global or local project directories.
     * @throws {Error} Throws an InvalidParameter error if name is not a non-empty string.
     * @throws {Error} Throws an InvalidProjectWorkspace error trying to instantiate a
     * local config file outside of a project workpace
     */
    constructor(fileName: any, isGlobal?: boolean, isState?: boolean, filePath?: string);
    /**
     * Read the config file and set this.contents
     *
     * @returns {BBPromise<object>} the json contents of the config file
     * @throws {Error} Throws error if there was a problem reading or parsing the file
     */
    read(): any;
    /**
     * Write the config file with new contents. If no new contents is passed in,
     * it will write this.contents that was set from read().
     *
     * @param {object} newContents the new contents of the file
     * @returns {BBPromise<object>} the written contents
     */
    write(): any;
    clear(): Promise<void>;
    /**
     * Check to see if the config file exist
     *
     * @returns {BBPromise<boolean>} true if the config file exist and has access,
     * false otherwise.
     */
    exist(): any;
    /**
     * Delete the config file
     *
     * @returns {BBPromise<boolean>} true if the file was deleted, false otherwise
     */
    delete(): any;
    checkEnoent(err: any): any;
}
export = ConfigFile;
