"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
// Local
const almError = require("../core/almError");
const logger = require("../core/logApi");
const Messages = require("../messages");
const messages = Messages();
const core_1 = require("@salesforce/core");
class GetCommand {
    constructor() {
        this.logger = logger.child('config:get');
    }
    async validate(context) {
        if (context.args.length === 0) {
            throw almError({ keyName: 'NoConfigKeysFound', bundle: 'configGetCommand' }, []);
        }
        return context;
    }
    async execute(context) {
        if (context.args.length === 0) {
            throw almError({ keyName: 'NoConfigKeysFound', bundle: 'configGetCommand' }, []);
        }
        this.flags = context.flags;
        const results = [];
        const aggregator = await core_1.ConfigAggregator.create();
        context.args.forEach(configName => {
            results.push(aggregator.getInfo(configName));
        });
        return results;
    }
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue('Config'));
        const columns = [
            {
                key: 'key',
                label: messages.getMessage('key', [], 'configListCommand')
            },
            {
                key: 'value',
                label: messages.getMessage('value', [], 'configListCommand')
            }
        ];
        if (this.flags.verbose) {
            columns.push({
                key: 'location',
                label: messages.getMessage('location', [], 'configListCommand')
            });
        }
        return columns;
    }
}
module.exports = GetCommand;

//# sourceMappingURL=ConfigGetCommand.js.map
