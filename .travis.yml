cache: false
env:
  - URL=https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
before_install:
- export SFDX_AUTOUPDATE_DISABLE=false
- export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true
- export SFDX_DOMAIN_RETRY=300
- export SFDX_DISABLE_APP_HUB=true
- export SFDX_LOG_LEVEL=DEBUG
- mkdir sfdx
- wget -qO- $URL | tar xJ -C sfdx --strip-components 1
- "./sfdx/install"
- export PATH=./sfdx/$(pwd):$PATH
- sfdx --version
- sfdx plugins --core
- sudo mkdir -p /Users/jackbarsotti/sfdx-travisci2/force-app/main/default/diff;
before_script:
- export build_head=$(git rev-parse HEAD)
- echo $build_head
- git config --replace-all remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
- git fetch
- export BRANCH=$TRAVIS_BRANCH
- export branch=$TRAVIS_BRANCH
- echo $TRAVIS_BRANCH
- export userPath=/Users/jackbarsotti/sfdx-travisci2/force-app/main/default;
- export diffPath=/diff/force-app/main/default;
- export DEPLOYDIR=/Users/jackbarsotti/sfdx-travisci2/force-app/main/default/diff;
- export classPath=force-app/main/default/classes;
- export triggerPath=force-app/main/default/triggers;

- >
  if [ "$BRANCH" == "dev" ]; then
    echo 'Your current branches: '
    echo
    for branch in $(git branch -r|grep -v HEAD); do
        echo $branch
        git checkout -qf ${branch#origin/}
    done;
    echo
    git checkout dev

    export CHANGED_FILES=`git diff --name-only master force-app/`
    sudo cp --parents $(git diff --name-only master force-app/) $DEPLOYDIR;

    echo
    echo 'Your changed files: '
    echo
    for FILE in $CHANGED_FILES; do
      echo ../$FILE
    done;
    echo

  fi; 

- >
  if [ "$BRANCH" == "qa" ]; then
    echo 'Your current branches: '
    echo
    for branch in $(git branch -r|grep -v HEAD); do
        echo $branch
        git checkout -qf ${branch#origin/}
    done;
    echo
    git checkout qa

    export CHANGED_FILES=`git diff --name-only dev force-app/`
    sudo cp --parents $(git diff --name-only dev force-app/) $DEPLOYDIR;

    echo
    echo 'Your changed files: '
    echo
    for FILE in $CHANGED_FILES; do
      echo ../$FILE
    done;
    echo

  fi; 

- >
  if [ "$BRANCH" == "uat" ]; then
    echo 'Your current branches: '
    echo
    for branch in $(git branch -r|grep -v HEAD); do
        echo $branch
        git checkout -qf ${branch#origin/}
    done;
    echo
    git checkout uat

    export CHANGED_FILES=`git diff --name-only qa force-app/`
    sudo cp --parents $(git diff --name-only qa force-app/) $DEPLOYDIR;

    echo
    echo 'Your changed files: '
    echo
    for FILE in $CHANGED_FILES; do
      echo ../$FILE
    done;
    echo

  fi; 

- >
  if [ "$BRANCH" == "master" ]; then
    echo 'Your current branches: '
    echo
    for branch in $(git branch -r|grep -v HEAD); do
        echo $branch
        git checkout -qf ${branch#origin/}
    done;
    echo
    git checkout master

    export CHANGED_FILES=`git diff --name-only dev force-app/`
    sudo cp --parents $(git diff --name-only dev force-app/) $DEPLOYDIR;

    echo
    echo 'Your changed files: '
    echo
    for FILE in $CHANGED_FILES; do
      echo ../$FILE
    done;
    echo

  fi; 

#ready for review
#NOTE: naming convention used for ...Test.cls files: "Test"
- for FILE in $CHANGED_FILES; do
    echo ' ';
    echo "Found changed file:`echo ' '$FILE`";
    if [[ $FILE == *Test.cls ]]; then
      sudo cp --parents "$(find $classPath -samefile "$FILE-meta.xml")"* $DEPLOYDIR;           
      echo 'Copying class file to diff folder for deployment...';
      echo 'Class files that will be deployed:';     
      ls $userPath$diffPath/classes;

    elif [[ $FILE == *Test.cls-meta.xml ]]; then
      export FILE2=${FILE%.cls-meta.xml};
      sudo cp --parents "$(find $classPath -samefile "$FILE2.cls")"* $DEPLOYDIR;
      echo 'Copying class meta file to diff folder for deployment...';
      echo 'Class files that will be deployed:';
      ls $userPath$diffPath/classes;

    elif [[ $FILE == *.cls ]]; then
      sudo cp --parents "$(find $classPath -samefile "$FILE-meta.xml")"* $DEPLOYDIR;           
      
      export classTests=$(find $classPath -samefile "${FILE%.cls}Test.cls" -o -samefile "${FILE%.cls}Test.cls-meta.xml");
      export tests=$(find $DEPLOYDIR -name "${Test%.cls*}");
      export deployTests=${classTests%.cls*};
      export deployTests=${deployTests##*/};
      
      for file in $classTests; do
        sudo cp --parents "$file"* $DEPLOYDIR;
      done;
      echo 'Copying class file to diff folder for deployment...';
      echo 'Class files that will be deployed:';     
      ls $userPath$diffPath/classes;

    elif [[ $FILE == *.cls-meta.xml ]]; then
      export FILE2=${FILE%.cls-meta.xml};
      sudo cp --parents "$(find $classPath -samefile "$FILE2.cls")"* $DEPLOYDIR;
      export classTests=$(find $classPath -samefile "${FILE2%.cls}Test.cls" -o -samefile "${FILE2%.cls}Test.cls-meta.xml");
      for file in $classTests; do
        sudo cp --parents "$file"* $DEPLOYDIR;
      done;
      echo 'Copying class meta file to diff folder for deployment...';
      echo 'Class files that will be deployed:';
      ls $userPath$diffPath/classes;
   
    elif [[ $FILE == *.trigger ]]; then
      sudo cp --parents "$(find $triggerPath -samefile "$FILE-meta.xml")"* $DEPLOYDIR;
      echo 'Copying trigger file to diff folder for deployment...';
      echo 'Trigger files that will be deployed:';
      ls $userPath$diffPath/triggers;
      
    elif [[ $FILE == *.trigger-meta.xml ]]; then
      export FILE3=${FILE%.trigger-meta.xml};
      sudo cp --parents "$(find $triggerPath -samefile "$FILE3.trigger")"* $DEPLOYDIR;
      echo 'Copying trigger meta file to diff folder for deployment...';
      echo 'Trigger files that will be deployed:';
      ls $userPath$diffPath/triggers;
    fi;
  done;

- git checkout $build_head;

- if [ "$BRANCH" == "dev" ]; then
      echo $SFDXAUTHURLDEV>authtravisci.txt;
      export TESTLEVEL="RunSpecifiedTests -r $tests";
  fi;
- if [ "$BRANCH" == "qa" ]; then
      echo $SFDXAUTHURLQA>authtravisci.txt;
      export TESTLEVEL="RunSpecifiedTests -r $deployTests";
  fi; 
- if [ "$BRANCH" == "uat" ]; then
      echo $SFDXAUTHURLUAT>authtravisci.txt;
      export TESTLEVEL=RunLocalTests;
  fi; 
- if [ "$BRANCH" == "master" ]; then
      echo $SFDXAUTHURL>authtravisci.txt;
      export TESTLEVEL=RunLocalTests;
  fi; 
- sfdx force:auth:sfdxurl:store -f authtravisci.txt -a targetEnvironment
# for full builds: - export DEPLOYDIR=force-app/main/default
#- export TESTLEVEL=RunLocalTests
- export deployErrorMsg='There was an issue deploying. Check ORG deployment status page for details'
script:
- sfdx force:org:display -u targetEnvironment
- sfdx force:source:deploy -w 10 -p $DEPLOYDIR -l $TESTLEVEL -u targetEnvironment
after_failure:
- if [ TRAVIS_TEST_RESULT != 0 ]; then
      echo $deployErrorMsg
  fi;